CCS PCM C Compiler, Version 4.018, 15888               01-Thg6-11 13:09

               Filename: C:\Users\Tunninia\Desktop\tuyen_doan\may tinh don gian.lst

               ROM used: 2366 words (29%)
                         Largest free fragment is 2048
               RAM used: 59 (16%) at main() level
                         84 (23%) worst case
               Stack:    11 worst case (5 in main + 6 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   082
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.3
001A:  GOTO   01D
001B:  BTFSC  0B.0
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   18C
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=20M) 
*
0085:  MOVLW  6C
0086:  MOVWF  04
0087:  BCF    03.7
0088:  MOVF   00,W
0089:  BTFSC  03.2
008A:  GOTO   098
008B:  MOVLW  06
008C:  MOVWF  78
008D:  CLRF   77
008E:  DECFSZ 77,F
008F:  GOTO   08E
0090:  DECFSZ 78,F
0091:  GOTO   08D
0092:  MOVLW  7B
0093:  MOVWF  77
0094:  DECFSZ 77,F
0095:  GOTO   094
0096:  DECFSZ 00,F
0097:  GOTO   08B
0098:  RETLW  00
.................... #include <def_877a.h> 
.................... // register definitions 
....................  
.................... #define W 0 
.................... #define F 1 
....................  
.................... // register files 
.................... #byte INDF          =0x00 
.................... #byte TMR0          =0x01 
.................... #byte PCL           =0x02 
.................... #byte STATUS        =0x03 
.................... #byte FSR           =0x04 
....................  
.................... #byte PORTA         =0x05 
.................... #byte PORTB         =0x06 
.................... #byte PORTC         =0x07 
.................... #byte PORTD         =0x08 
.................... #byte PORTE         =0x09 
....................  
.................... #byte EEDATA     =0x10C 
.................... #byte EEADR      =0x10D 
.................... #byte EEDATH     =0x10E 
.................... #byte EEADRH     =0x10F 
.................... #byte ADCON0     =0x1F 
.................... #byte ADCON1     =0x9F 
.................... #byte ADRESH     =0x9F 
.................... #byte ADSESL     =0x9F 
....................  
.................... #byte PCLATH  =0x0a 
.................... #byte INTCON  =0x0b 
.................... #byte PIR1    =0x0c 
.................... #byte PIR2    =0x0d 
.................... #byte PIE1    =0x8c 
.................... #byte PIE2    =0x8d 
....................  
.................... #byte OPTION_REG    =0x81 
....................  
.................... #byte TRISA         =0x85 
.................... #byte TRISB         =0x86 
.................... #byte TRISC         =0x87 
.................... #byte TRISD         =0x88 
.................... #byte TRISE         =0x89 
....................  
.................... #byte EECON1        =0x18C 
.................... #byte EECON2        =0x18D 
....................  
.................... //DINH NGHIA BIT 
.................... #bit RA5   =0x05.5 
.................... #bit RA4   =0x05.4 
.................... #bit RA3   =0x05.3 
.................... #bit RA2   =0x05.2 
.................... #bit RA1   =0x05.1 
.................... #bit RA0   =0x05.0 
....................  
.................... #bit RB7   =0x06.7 
.................... #bit RB6   =0x06.6 
.................... #bit RB5   =0x06.5 
.................... #bit RB4   =0x06.4 
.................... #bit RB3   =0x06.3 
.................... #bit RB2   =0x06.2 
.................... #bit RB1   =0x06.1 
.................... #bit RB0   =0x06.0 
....................  
.................... #bit RC7   =0x07.7 
.................... #bit RC6   =0x07.6 
.................... #bit RC5   =0x07.5 
.................... #bit RC4   =0x07.4 
.................... #bit RC3   =0x07.3 
.................... #bit RC2   =0x07.2 
.................... #bit RC1   =0x07.1 
.................... #bit RC0   =0x07.0 
....................  
.................... #bit RD7   =0x08.7 
.................... #bit RD6   =0x08.6 
.................... #bit RD5   =0x08.5 
.................... #bit RD4   =0x08.4 
.................... #bit RD3   =0x08.3 
.................... #bit RD2   =0x08.2 
.................... #bit RD1   =0x08.1 
.................... #bit RD0   =0x08.0 
....................  
.................... #bit RE2   =0x09.2 
.................... #bit RE1   =0x09.1 
.................... #bit RE0   =0x09.0 
....................  
....................  
.................... #bit TRISA5   =0x85.5 
.................... #bit TRISA4   =0x85.4 
.................... #bit TRISA3   =0x85.3 
.................... #bit TRISA2   =0x85.2 
.................... #bit TRISA1   =0x85.1 
.................... #bit TRISA0   =0x85.0 
....................  
.................... #bit TRISB7   =0x86.7 
.................... #bit TRISB6   =0x86.6 
.................... #bit TRISB5   =0x86.5 
.................... #bit TRISB4   =0x86.4 
.................... #bit TRISB3   =0x86.3 
.................... #bit TRISB2   =0x86.2 
.................... #bit TRISB1   =0x86.1 
.................... #bit TRISB0   =0x86.0 
....................  
.................... #bit TRISC7   =0x87.7 
.................... #bit TRISC6   =0x87.6 
.................... #bit TRISC5   =0x87.5 
.................... #bit TRISC4   =0x87.4 
.................... #bit TRISC3   =0x87.3 
.................... #bit TRISC2   =0x87.2 
.................... #bit TRISC1   =0x87.1 
.................... #bit TRISC0   =0x87.0 
....................  
.................... #bit TRISD7   =0x88.7 
.................... #bit TRISD6   =0x88.6 
.................... #bit TRISD5   =0x88.5 
.................... #bit TRISD4   =0x88.4 
.................... #bit TRISD3   =0x88.3 
.................... #bit TRISD2   =0x88.2 
.................... #bit TRISD1   =0x88.1 
.................... #bit TRISD0   =0x88.0 
....................  
.................... #bit TRISE2   =0x89.2 
.................... #bit TRISE1   =0x89.1 
.................... #bit TRISE0   =0x89.0 
....................  
.................... // INTCON Bits for C 
.................... #bit gie       = 0x0b.7 
.................... #bit peie      = 0x0b.6 
.................... #bit tmr0ie    = 0x0b.5 
.................... #bit int0ie    = 0x0b.4 
.................... #bit rbie      = 0x0b.3 
.................... #bit tmr0if    = 0x0b.2 
.................... #bit int0if    = 0x0b.1 
.................... #bit rbif      = 0x0b.0 
....................  
.................... // PIR1 for C 
.................... #bit pspif     = 0x0c.7 
.................... #bit adif      = 0x0c.6 
.................... #bit rcif      = 0x0c.5 
.................... #bit txif      = 0x0c.4 
.................... #bit sspif     = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //PIR2 for C 
.................... #bit cmif      = 0x0d.6 
.................... #bit eeif      = 0x0d.4 
.................... #bit bclif     = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... // PIE1 for C 
.................... #bit adie      = 0x8c.6 
.................... #bit rcie      = 0x8c.5 
.................... #bit txie      = 0x8c.4 
.................... #bit sspie     = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //PIE2 for C 
.................... #bit osfie     = 0x8d.7 
.................... #bit cmie      = 0x8d.6 
.................... #bit eeie      = 0x8d.4 
....................  
.................... // OPTION Bits 
.................... #bit not_rbpu   = 0x81.7 
.................... #bit intedg     = 0x81.6 
.................... #bit t0cs       = 0x81.5 
.................... #bit t0se       = 0x81.4 
.................... #bit psa        = 0x81.3 
.................... #bit ps2        = 0x81.2 
.................... #bit ps1        = 0x81.1 
.................... #bit ps0        = 0x81.0 
....................  
.................... // EECON1 Bits 
.................... #bit eepgd     = 0x18c.7 
.................... #bit free      = 0x18C.4 
.................... #bit wrerr     = 0x18C.3 
.................... #bit wren      = 0x18C.2 
.................... #bit wr        = 0x18C.1 
.................... #bit rd        = 0x18C.0 
....................  
.................... //ADCON0 
.................... #bit CHS0    =0x1F.3 
.................... #bit CHS1    =0x1F.4 
.................... #bit CHS2    =0x1F.5 
....................  
.................... #include <lcd_4bit.c> 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(int *)==1 
.................... #define ptrdiff_t int 
.................... #else 
.................... #define ptrdiff_t long 
.................... #endif 
....................  
.................... #define size_t int 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... #define LCD_RS          PIN_D0 
.................... //#define LCD_RW          PIN_A1 
.................... #define LCD_EN          PIN_D1 
....................  
.................... #define LCD_D4          PIN_D4 
.................... #define LCD_D5          PIN_D5 
.................... #define LCD_D6          PIN_D6 
.................... #define LCD_D7          PIN_D7 
....................  
.................... // misc display defines- 
.................... #define Line_1          0x80 
.................... #define Line_2          0xC0 
.................... #define Clear_Scr       0x01 
....................  
.................... // prototype statements 
.................... #separate void LCD_Init ( void );// ham khoi tao LCD 
.................... #separate void LCD_SetPosition ( unsigned int cX );//Thiet lap vi tri con tro 
.................... #separate void LCD_PutChar ( unsigned int cX );// Ham viet1kitu/1chuoi len LCD 
.................... #separate void LCD_PutCmd ( unsigned int cX) ;// Ham gui lenh len LCD 
.................... #separate void LCD_PulseEnable ( void );// Xung kich hoat 
.................... #separate void LCD_SetData ( unsigned int cX );// Dat du lieu len chan Data 
.................... // D/n Cong 
.................... #use standard_io ( B ) 
.................... #use standard_io (A) 
....................  
.................... //khoi tao LCD********************************************** 
.................... #separate void LCD_Init ( void ) 
....................     { 
*
0800:  CLRF   28
0801:  BTFSC  0B.7
0802:  BSF    28.7
0803:  BCF    0B.7
....................     LCD_SetData ( 0x00 ); 
0804:  CLRF   6C
0805:  BCF    0A.3
0806:  CALL   064
0807:  BSF    0A.3
0808:  BTFSC  28.7
0809:  BSF    0B.7
080A:  CLRF   28
080B:  BTFSC  0B.7
080C:  BSF    28.7
080D:  BCF    0B.7
....................     delay_ms(200);       /* wait enough time after Vdd rise >> 15ms */ 
080E:  MOVLW  C8
080F:  MOVWF  6C
0810:  BCF    0A.3
0811:  CALL   085
0812:  BSF    0A.3
0813:  BTFSC  28.7
0814:  BSF    0B.7
....................     output_low ( LCD_RS );// che do gui lenh 
0815:  BSF    03.5
0816:  BCF    08.0
0817:  BCF    03.5
0818:  BCF    08.0
0819:  CLRF   28
081A:  BTFSC  0B.7
081B:  BSF    28.7
081C:  BCF    0B.7
....................     LCD_SetData ( 0x03 );   /* init with specific nibbles to start 4-bit mode */ 
081D:  MOVLW  03
081E:  MOVWF  6C
081F:  BCF    0A.3
0820:  CALL   064
0821:  BSF    0A.3
0822:  BTFSC  28.7
0823:  BSF    0B.7
0824:  CLRF   28
0825:  BTFSC  0B.7
0826:  BSF    28.7
0827:  BCF    0B.7
....................     LCD_PulseEnable(); 
0828:  BCF    0A.3
0829:  CALL   099
082A:  BSF    0A.3
082B:  BTFSC  28.7
082C:  BSF    0B.7
082D:  CLRF   28
082E:  BTFSC  0B.7
082F:  BSF    28.7
0830:  BCF    0B.7
....................     LCD_PulseEnable(); 
0831:  BCF    0A.3
0832:  CALL   099
0833:  BSF    0A.3
0834:  BTFSC  28.7
0835:  BSF    0B.7
0836:  CLRF   28
0837:  BTFSC  0B.7
0838:  BSF    28.7
0839:  BCF    0B.7
....................     LCD_PulseEnable(); 
083A:  BCF    0A.3
083B:  CALL   099
083C:  BSF    0A.3
083D:  BTFSC  28.7
083E:  BSF    0B.7
083F:  CLRF   28
0840:  BTFSC  0B.7
0841:  BSF    28.7
0842:  BCF    0B.7
....................     LCD_SetData ( 0x02 );   /* set 4-bit interface */ 
0843:  MOVLW  02
0844:  MOVWF  6C
0845:  BCF    0A.3
0846:  CALL   064
0847:  BSF    0A.3
0848:  BTFSC  28.7
0849:  BSF    0B.7
084A:  CLRF   28
084B:  BTFSC  0B.7
084C:  BSF    28.7
084D:  BCF    0B.7
....................     LCD_PulseEnable();      /* send dual nibbles hereafter, MSN first */ 
084E:  BCF    0A.3
084F:  CALL   099
0850:  BSF    0A.3
0851:  BTFSC  28.7
0852:  BSF    0B.7
0853:  CLRF   28
0854:  BTFSC  0B.7
0855:  BSF    28.7
0856:  BCF    0B.7
....................     LCD_PutCmd ( 0x2C );    /* function set (all lines, 5x7 characters) */ 
0857:  MOVLW  2C
0858:  MOVWF  6B
0859:  BCF    0A.3
085A:  CALL   0AA
085B:  BSF    0A.3
085C:  BTFSC  28.7
085D:  BSF    0B.7
085E:  CLRF   28
085F:  BTFSC  0B.7
0860:  BSF    28.7
0861:  BCF    0B.7
....................     LCD_PutCmd ( 0b00001100);    /* display ON, cursor off, no blink */ 
0862:  MOVLW  0C
0863:  MOVWF  6B
0864:  BCF    0A.3
0865:  CALL   0AA
0866:  BSF    0A.3
0867:  BTFSC  28.7
0868:  BSF    0B.7
0869:  CLRF   28
086A:  BTFSC  0B.7
086B:  BSF    28.7
086C:  BCF    0B.7
....................     LCD_PutCmd ( 0x06 );    /* entry mode set, increment & scroll left */ 
086D:  MOVLW  06
086E:  MOVWF  6B
086F:  BCF    0A.3
0870:  CALL   0AA
0871:  BSF    0A.3
0872:  BTFSC  28.7
0873:  BSF    0B.7
0874:  CLRF   28
0875:  BTFSC  0B.7
0876:  BSF    28.7
0877:  BCF    0B.7
....................     LCD_PutCmd ( 0x01 );    /* clear display */ 
0878:  MOVLW  01
0879:  MOVWF  6B
087A:  BCF    0A.3
087B:  CALL   0AA
087C:  BSF    0A.3
087D:  BTFSC  28.7
087E:  BSF    0B.7
....................     } 
087F:  BSF    0A.3
0880:  BCF    0A.4
0881:  GOTO   08F (RETURN)
....................  
.................... #separate void LCD_SetPosition ( unsigned int cX ) 
....................     { 
....................     /* this subroutine works specifically for 4-bit Port A */ 
....................     LCD_SetData ( swap ( cX ) | 0x08 ); 
....................     LCD_PulseEnable(); 
....................     LCD_SetData ( swap ( cX ) ); 
....................     LCD_PulseEnable(); 
....................     } 
....................  
.................... #separate void LCD_PutChar ( unsigned int cX ) 
....................     { 
....................     /* this subroutine works specifically for 4-bit Port A */ 
....................         output_high ( LCD_RS ); 
*
00DA:  BSF    03.5
00DB:  BCF    08.0
00DC:  BCF    03.5
00DD:  BSF    08.0
....................         LCD_PutCmd( cX ); 
00DE:  MOVF   6A,W
00DF:  MOVWF  6B
00E0:  CALL   0AA
....................         output_low ( LCD_RS ); 
00E1:  BSF    03.5
00E2:  BCF    08.0
00E3:  BCF    03.5
00E4:  BCF    08.0
....................     } 
00E5:  RETLW  00
....................  
.................... #separate void LCD_PutCmd ( unsigned int cX ) 
....................     { 
....................     /* this subroutine works specifically for 4-bit Port A */ 
....................     LCD_SetData ( swap ( cX ) );     /* send high nibble */ 
*
00AA:  SWAPF  6B,F
00AB:  MOVF   6B,W
00AC:  MOVWF  6C
00AD:  CALL   064
....................     LCD_PulseEnable(); 
00AE:  CALL   099
....................     LCD_SetData ( swap ( cX ) );     /* send low nibble */ 
00AF:  SWAPF  6B,F
00B0:  MOVF   6B,W
00B1:  MOVWF  6C
00B2:  CALL   064
....................     LCD_PulseEnable(); 
00B3:  CALL   099
....................     } 
00B4:  RETLW  00
.................... #separate void LCD_PulseEnable ( void ) 
....................     { 
....................     output_high ( LCD_EN ); 
*
0099:  BSF    03.5
009A:  BCF    08.1
009B:  BCF    03.5
009C:  BSF    08.1
....................     delay_us ( 3 );         // was 10 
009D:  MOVLW  04
009E:  MOVWF  77
009F:  DECFSZ 77,F
00A0:  GOTO   09F
00A1:  GOTO   0A2
....................     output_low ( LCD_EN ); 
00A2:  BSF    03.5
00A3:  BCF    08.1
00A4:  BCF    03.5
00A5:  BCF    08.1
....................     delay_ms ( 3 );         // was 5 
00A6:  MOVLW  03
00A7:  MOVWF  6C
00A8:  CALL   085
....................     } 
00A9:  RETLW  00
....................  
.................... #separate void LCD_SetData ( unsigned int cX ) 
....................     { 
....................     output_bit ( LCD_D4, cX & 0x01 ); 
*
0064:  BTFSC  6C.0
0065:  GOTO   068
0066:  BCF    08.4
0067:  GOTO   069
0068:  BSF    08.4
0069:  BSF    03.5
006A:  BCF    08.4
....................     output_bit ( LCD_D5, cX & 0x02 ); 
006B:  BCF    03.5
006C:  BTFSC  6C.1
006D:  GOTO   070
006E:  BCF    08.5
006F:  GOTO   071
0070:  BSF    08.5
0071:  BSF    03.5
0072:  BCF    08.5
....................     output_bit ( LCD_D6, cX & 0x04 ); 
0073:  BCF    03.5
0074:  BTFSC  6C.2
0075:  GOTO   078
0076:  BCF    08.6
0077:  GOTO   079
0078:  BSF    08.6
0079:  BSF    03.5
007A:  BCF    08.6
....................     output_bit ( LCD_D7, cX & 0x08 ); 
007B:  BCF    03.5
007C:  BTFSC  6C.3
007D:  GOTO   080
007E:  BCF    08.7
007F:  GOTO   081
0080:  BSF    08.7
0081:  BSF    03.5
0082:  BCF    08.7
....................     } 
0083:  BCF    03.5
0084:  RETLW  00
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.141592654 
....................  
....................  
.................... #define SQRT2  1.41421356 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float CEIL_FLOOR(float x, int n) 
.................... { 
....................    float y, res; 
....................    long l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float)(long)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (long)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float)l); 
....................   res = 32768.0*(float)l; 
....................   res += (float)(long)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float)(long)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float floor(float x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float ceil(float x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //	float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float x,float y) 
.................... { 
....................    float i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
....................  
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
....................  
.................... #define LN2 0.6931471806 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... float exp(float x) 
.................... { 
....................    float y, res, r; 
....................    signed int n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed long)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................    *(&res) = n + 0x7F; 
....................  
....................    y = y/LN2 - (float)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... /************************************************************/ 
....................  
.................... float const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float log(float x) 
.................... { 
....................    float y, res, r, y2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................       *(&y) = 0x7E; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................       n = *(&x) - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float)-n; 
....................       else 
....................          r = (float)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... #define LN10 2.30258509 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float log10(float x) 
.................... { 
....................    float r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float modf(float value,float *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float pwr(float x,float y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float pow(float x,float y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float sqrt(float x) 
.................... { 
....................    float y, res; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p=&y; 
....................    (*p)=(BYTE)((((int16)(*p)) + 127) >> 1); 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................       (*p)--; 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
....................  
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO	1.570796326794896 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI 			0.6366197724 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float cos(float x) 
.................... { 
.................... 	float y, t, t2 = 1.0; 
.................... 	int quad, i; 
.................... 	float frac; 
.................... 	float p[4] = { 
.................... 		-0.499999993585, 
.................... 		 0.041666636258, 
.................... 		-0.0013888361399, 
.................... 		 0.00002476016134 
.................... 	}; 
....................  
.................... 	if (x < 0) x = -x;                  // absolute value of input 
....................  
.................... 	quad = (int)(x / PI_DIV_BY_TWO);    // quadrant 
.................... 	frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
.................... 	quad = quad % 4;                    // quadrant (0 to 3) 
....................  
.................... 	if (quad == 0 || quad == 2) 
.................... 		t = frac * PI_DIV_BY_TWO; 
.................... 	else if (quad == 1) 
.................... 		t = (1-frac) * PI_DIV_BY_TWO; 
.................... 	else // should be 3 
.................... 		t = (frac-1) * PI_DIV_BY_TWO; 
....................  
.................... 	y = 0.999999999781; 
.................... 	t = t * t; 
.................... 	for (i = 0; i <= 3; i++) 
.................... 	{ 
.................... 		t2 = t2 * t; 
.................... 		y = y + p[i] * t2; 
.................... 	} 
....................  
.................... 	if (quad == 2 || quad == 1) 
.................... 		y = -y;  // correct sign 
....................  
.................... 	return (y); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float sin(float x) 
.................... { 
.................... 	return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float tan(float x) 
.................... { 
....................    float c, s; 
....................  
....................    c = cos(x); 
.................... 	if (c == 0.0) 
.................... 	   return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
....................  
....................  
.................... float const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float ASIN_COS(float x, int n) 
.................... { 
....................    float y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float asin(float x) 
.................... { 
....................    float r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float acos(float x) 
.................... { 
....................    float r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... float const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float atan(float x) 
.................... { 
....................    float y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //	float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
....................  
.................... float atan2(float y,float x) 
.................... { 
....................    float z; 
....................    int1 sign; 
....................    int quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float cosh(float x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float sinh(float x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float tanh(float x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
....................  
....................  
.................... #define LOG2 .30102999566398119521 
.................... float frexp(float x, signed int *exp) 
.................... { 
....................    float res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //	float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float ldexp(float value, signed int exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
....................  
....................  
.................... #bit  cot1=portB.4 
.................... #bit  cot2=portB.5 
.................... #bit  cot3=portB.6 
.................... #bit  cot4=portB.7 
....................  
.................... #bit  hang1=portB.0 
.................... #bit  hang2=portB.1 
.................... #bit  hang3=portB.2 
.................... #bit  hang4=portB.3 
.................... long kq,kq1,kq2,ok,pt,j; 
....................  
.................... //------------------------------------------------------------------------ 
.................... //--------------------------Chuong trinh con----------------------------- 
.................... //------------------------------------------------------------------------ 
....................  
....................  
.................... int8  const tit0[]={"*DO AN HTN*"}; 
.................... int8  const tit1[]={"-T-T-V-"}; 
.................... int8  tit2[15]; 
.................... int8  tit3[15]; 
.................... int8 i; 
....................  
.................... void write_line1(long kq,pt){ 
....................    lcd_putcmd(clear_scr); 
*
0124:  MOVLW  01
0125:  MOVWF  6B
0126:  CALL   0AA
....................    lcd_putcmd(line_1); 
0127:  MOVLW  80
0128:  MOVWF  6B
0129:  CALL   0AA
....................    i=0;j=kq; 
012A:  CLRF   53
012B:  MOVF   67,W
012C:  MOVWF  34
012D:  MOVF   66,W
012E:  MOVWF  33
....................    while (j!=0) 
....................    { 
012F:  MOVF   33,F
0130:  BTFSS  03.2
0131:  GOTO   135
0132:  MOVF   34,F
0133:  BTFSC  03.2
0134:  GOTO   15B
....................       if (j%10) tit2[i]=1; 
0135:  MOVF   34,W
0136:  MOVWF  6A
0137:  MOVF   33,W
0138:  MOVWF  69
0139:  CLRF   6C
013A:  MOVLW  0A
013B:  MOVWF  6B
013C:  CALL   0B5
013D:  MOVF   77,W
013E:  IORWF  7A,W
013F:  BTFSC  03.2
0140:  GOTO   148
0141:  MOVLW  35
0142:  ADDWF  53,W
0143:  MOVWF  04
0144:  BCF    03.7
0145:  MOVLW  01
0146:  MOVWF  00
....................       else      tit2[i]=0; 
0147:  GOTO   14D
0148:  MOVLW  35
0149:  ADDWF  53,W
014A:  MOVWF  04
014B:  BCF    03.7
014C:  CLRF   00
....................       //tit2[i]=j%10; 
....................       j=j/10; 
014D:  MOVF   34,W
014E:  MOVWF  6A
014F:  MOVF   33,W
0150:  MOVWF  69
0151:  CLRF   6C
0152:  MOVLW  0A
0153:  MOVWF  6B
0154:  CALL   0B5
0155:  MOVF   79,W
0156:  MOVWF  34
0157:  MOVF   78,W
0158:  MOVWF  33
....................       i++; 
0159:  INCF   53,F
....................    } 
015A:  GOTO   12F
....................    for (j=i-1;j>=0;j--) lcd_putchar(tit2[j]);   
015B:  MOVLW  01
015C:  SUBWF  53,W
015D:  MOVWF  33
015E:  CLRF   34
015F:  MOVLW  35
0160:  ADDWF  33,W
0161:  MOVWF  04
0162:  BCF    03.7
0163:  BTFSC  34.0
0164:  BSF    03.7
0165:  MOVF   00,W
0166:  MOVWF  69
0167:  MOVWF  6A
0168:  CALL   0DA
0169:  MOVF   33,W
016A:  BTFSC  03.2
016B:  DECF   34,F
016C:  DECF   33,F
016D:  GOTO   15F
....................    if (pt==1)  lcd_putchar('+'); 
016E:  DECFSZ 68,W
016F:  GOTO   174
0170:  MOVLW  2B
0171:  MOVWF  6A
0172:  CALL   0DA
....................    else 
0173:  GOTO   18B
....................       if  (pt==2) lcd_putchar('-'); 
0174:  MOVF   68,W
0175:  SUBLW  02
0176:  BTFSS  03.2
0177:  GOTO   17C
0178:  MOVLW  2D
0179:  MOVWF  6A
017A:  CALL   0DA
....................       else 
017B:  GOTO   18B
....................          if (pt==3)  lcd_putchar('x'); 
017C:  MOVF   68,W
017D:  SUBLW  03
017E:  BTFSS  03.2
017F:  GOTO   184
0180:  MOVLW  78
0181:  MOVWF  6A
0182:  CALL   0DA
....................          else       
0183:  GOTO   18B
....................             if (pt==4)  lcd_putchar(':'); 
0184:  MOVF   68,W
0185:  SUBLW  04
0186:  BTFSS  03.2
0187:  GOTO   18B
0188:  MOVLW  3A
0189:  MOVWF  6A
018A:  CALL   0DA
....................              
....................           
....................   
.................... } 
018B:  RETLW  00
.................... void  write_line2(long kq){ 
....................    lcd_putcmd(line_2); 
*
00E6:  MOVLW  C0
00E7:  MOVWF  6B
00E8:  CALL   0AA
....................    i=0;j=kq; 
00E9:  CLRF   53
00EA:  MOVF   65,W
00EB:  MOVWF  34
00EC:  MOVF   64,W
00ED:  MOVWF  33
....................    while (j!=0) 
....................    { 
00EE:  MOVF   33,F
00EF:  BTFSS  03.2
00F0:  GOTO   0F4
00F1:  MOVF   34,F
00F2:  BTFSC  03.2
00F3:  GOTO   110
....................       tit2[i]=j%10; 
00F4:  MOVLW  35
00F5:  ADDWF  53,W
00F6:  MOVWF  04
00F7:  BCF    03.7
00F8:  MOVF   34,W
00F9:  MOVWF  6A
00FA:  MOVF   33,W
00FB:  MOVWF  69
00FC:  CLRF   6C
00FD:  MOVLW  0A
00FE:  MOVWF  6B
00FF:  CALL   0B5
0100:  MOVF   77,W
0101:  MOVWF  00
....................       j=j/10; 
0102:  MOVF   34,W
0103:  MOVWF  6A
0104:  MOVF   33,W
0105:  MOVWF  69
0106:  CLRF   6C
0107:  MOVLW  0A
0108:  MOVWF  6B
0109:  CALL   0B5
010A:  MOVF   79,W
010B:  MOVWF  34
010C:  MOVF   78,W
010D:  MOVWF  33
....................       i++; 
010E:  INCF   53,F
....................    } 
010F:  GOTO   0EE
....................    for (j=i-1;j>=0;j--) lcd_putchar(tit2[j]);   
0110:  MOVLW  01
0111:  SUBWF  53,W
0112:  MOVWF  33
0113:  CLRF   34
0114:  MOVLW  35
0115:  ADDWF  33,W
0116:  MOVWF  04
0117:  BCF    03.7
0118:  BTFSC  34.0
0119:  BSF    03.7
011A:  MOVF   00,W
011B:  MOVWF  66
011C:  MOVWF  6A
011D:  CALL   0DA
011E:  MOVF   33,W
011F:  BTFSC  03.2
0120:  DECF   34,F
0121:  DECF   33,F
0122:  GOTO   114
....................    } 
0123:  RETLW  00
....................  
....................  
....................  
.................... #int_RB // Chuong trinh ngat Port B 
.................... void  RB_isr(void){ 
....................  
.................... long kq=0, kq1=0, kq2=0; 
*
018C:  CLRF   5C
018D:  CLRF   5D
018E:  CLRF   5E
018F:  CLRF   5F
0190:  CLRF   60
0191:  CLRF   61
....................    if(hang1==1){ 
0192:  BTFSS  06.0
0193:  GOTO   325
....................       if(cot1==1){ 
0194:  BTFSS  06.4
0195:  GOTO   1E9
....................          if (ok==0)  
0196:  MOVF   2F,F
0197:  BTFSS  03.2
0198:  GOTO   1B8
0199:  MOVF   30,F
019A:  BTFSS  03.2
019B:  GOTO   1B8
....................          {      kq1=kq1*10+7;write_line2(kq1+48);  } 
019C:  MOVF   5F,W
019D:  MOVWF  63
019E:  MOVF   5E,W
019F:  MOVWF  62
01A0:  CLRF   65
01A1:  MOVLW  0A
01A2:  MOVWF  64
01A3:  CALL   04F
01A4:  MOVLW  07
01A5:  ADDWF  78,W
01A6:  MOVWF  5E
01A7:  MOVF   79,W
01A8:  MOVWF  5F
01A9:  BTFSC  03.0
01AA:  INCF   5F,F
01AB:  MOVLW  30
01AC:  ADDWF  5E,W
01AD:  MOVWF  62
01AE:  MOVF   5F,W
01AF:  MOVWF  63
01B0:  BTFSC  03.0
01B1:  INCF   63,F
01B2:  MOVF   63,W
01B3:  MOVWF  65
01B4:  MOVF   62,W
01B5:  MOVWF  64
01B6:  CALL   0E6
....................          else  {kq2=kq2*10+7;write_line1(kq1+48,pt+48);write_line2(kq2+48); } 
01B7:  GOTO   1E8
01B8:  MOVF   61,W
01B9:  MOVWF  63
01BA:  MOVF   60,W
01BB:  MOVWF  62
01BC:  CLRF   65
01BD:  MOVLW  0A
01BE:  MOVWF  64
01BF:  CALL   04F
01C0:  MOVLW  07
01C1:  ADDWF  78,W
01C2:  MOVWF  60
01C3:  MOVF   79,W
01C4:  MOVWF  61
01C5:  BTFSC  03.0
01C6:  INCF   61,F
01C7:  MOVLW  30
01C8:  ADDWF  5E,W
01C9:  MOVWF  62
01CA:  MOVF   5F,W
01CB:  MOVWF  63
01CC:  BTFSC  03.0
01CD:  INCF   63,F
01CE:  MOVLW  30
01CF:  ADDWF  31,W
01D0:  MOVWF  64
01D1:  MOVF   32,W
01D2:  MOVWF  65
01D3:  BTFSC  03.0
01D4:  INCF   65,F
01D5:  MOVF   63,W
01D6:  MOVWF  67
01D7:  MOVF   62,W
01D8:  MOVWF  66
01D9:  MOVF   64,W
01DA:  MOVWF  68
01DB:  CALL   124
01DC:  MOVLW  30
01DD:  ADDWF  60,W
01DE:  MOVWF  62
01DF:  MOVF   61,W
01E0:  MOVWF  63
01E1:  BTFSC  03.0
01E2:  INCF   63,F
01E3:  MOVF   63,W
01E4:  MOVWF  65
01E5:  MOVF   62,W
01E6:  MOVWF  64
01E7:  CALL   0E6
....................  
....................          //lcd_putchar('7');// Hien thi ra LCD so 7 
....................       
....................   
....................       } 
....................       else  if(cot2==1){lcd_putcmd(clear_scr); 
01E8:  GOTO   324
01E9:  BTFSS  06.5
01EA:  GOTO   241
01EB:  MOVLW  01
01EC:  MOVWF  6B
01ED:  CALL   0AA
....................               if (ok==0)  
01EE:  MOVF   2F,F
01EF:  BTFSS  03.2
01F0:  GOTO   210
01F1:  MOVF   30,F
01F2:  BTFSS  03.2
01F3:  GOTO   210
....................               {      kq1=kq1*10+8;write_line2(kq1+48);} 
01F4:  MOVF   5F,W
01F5:  MOVWF  63
01F6:  MOVF   5E,W
01F7:  MOVWF  62
01F8:  CLRF   65
01F9:  MOVLW  0A
01FA:  MOVWF  64
01FB:  CALL   04F
01FC:  MOVLW  08
01FD:  ADDWF  78,W
01FE:  MOVWF  5E
01FF:  MOVF   79,W
0200:  MOVWF  5F
0201:  BTFSC  03.0
0202:  INCF   5F,F
0203:  MOVLW  30
0204:  ADDWF  5E,W
0205:  MOVWF  62
0206:  MOVF   5F,W
0207:  MOVWF  63
0208:  BTFSC  03.0
0209:  INCF   63,F
020A:  MOVF   63,W
020B:  MOVWF  65
020C:  MOVF   62,W
020D:  MOVWF  64
020E:  CALL   0E6
....................               else  {kq2=kq2*10+8;write_line1(kq1+48,pt+48);write_line2(kq2+48);}         
020F:  GOTO   240
0210:  MOVF   61,W
0211:  MOVWF  63
0212:  MOVF   60,W
0213:  MOVWF  62
0214:  CLRF   65
0215:  MOVLW  0A
0216:  MOVWF  64
0217:  CALL   04F
0218:  MOVLW  08
0219:  ADDWF  78,W
021A:  MOVWF  60
021B:  MOVF   79,W
021C:  MOVWF  61
021D:  BTFSC  03.0
021E:  INCF   61,F
021F:  MOVLW  30
0220:  ADDWF  5E,W
0221:  MOVWF  62
0222:  MOVF   5F,W
0223:  MOVWF  63
0224:  BTFSC  03.0
0225:  INCF   63,F
0226:  MOVLW  30
0227:  ADDWF  31,W
0228:  MOVWF  64
0229:  MOVF   32,W
022A:  MOVWF  65
022B:  BTFSC  03.0
022C:  INCF   65,F
022D:  MOVF   63,W
022E:  MOVWF  67
022F:  MOVF   62,W
0230:  MOVWF  66
0231:  MOVF   64,W
0232:  MOVWF  68
0233:  CALL   124
0234:  MOVLW  30
0235:  ADDWF  60,W
0236:  MOVWF  62
0237:  MOVF   61,W
0238:  MOVWF  63
0239:  BTFSC  03.0
023A:  INCF   63,F
023B:  MOVF   63,W
023C:  MOVWF  65
023D:  MOVF   62,W
023E:  MOVWF  64
023F:  CALL   0E6
....................                 
....................                //lcd_putchar('8');// Hien thi ra LCD so 8 
....................     
....................             } 
....................             else  if(cot3==1){lcd_putcmd(clear_scr); 
0240:  GOTO   324
0241:  BTFSS  06.6
0242:  GOTO   299
0243:  MOVLW  01
0244:  MOVWF  6B
0245:  CALL   0AA
....................                      if (ok==0)  
0246:  MOVF   2F,F
0247:  BTFSS  03.2
0248:  GOTO   268
0249:  MOVF   30,F
024A:  BTFSS  03.2
024B:  GOTO   268
....................                      {      kq1=kq1*10+9;write_line2(kq1+48);} 
024C:  MOVF   5F,W
024D:  MOVWF  63
024E:  MOVF   5E,W
024F:  MOVWF  62
0250:  CLRF   65
0251:  MOVLW  0A
0252:  MOVWF  64
0253:  CALL   04F
0254:  MOVLW  09
0255:  ADDWF  78,W
0256:  MOVWF  5E
0257:  MOVF   79,W
0258:  MOVWF  5F
0259:  BTFSC  03.0
025A:  INCF   5F,F
025B:  MOVLW  30
025C:  ADDWF  5E,W
025D:  MOVWF  62
025E:  MOVF   5F,W
025F:  MOVWF  63
0260:  BTFSC  03.0
0261:  INCF   63,F
0262:  MOVF   63,W
0263:  MOVWF  65
0264:  MOVF   62,W
0265:  MOVWF  64
0266:  CALL   0E6
....................                      else  {kq2=kq2*10+9;write_line1(kq1+48,pt+48);write_line2(kq2+48);} 
0267:  GOTO   298
0268:  MOVF   61,W
0269:  MOVWF  63
026A:  MOVF   60,W
026B:  MOVWF  62
026C:  CLRF   65
026D:  MOVLW  0A
026E:  MOVWF  64
026F:  CALL   04F
0270:  MOVLW  09
0271:  ADDWF  78,W
0272:  MOVWF  60
0273:  MOVF   79,W
0274:  MOVWF  61
0275:  BTFSC  03.0
0276:  INCF   61,F
0277:  MOVLW  30
0278:  ADDWF  5E,W
0279:  MOVWF  62
027A:  MOVF   5F,W
027B:  MOVWF  63
027C:  BTFSC  03.0
027D:  INCF   63,F
027E:  MOVLW  30
027F:  ADDWF  31,W
0280:  MOVWF  64
0281:  MOVF   32,W
0282:  MOVWF  65
0283:  BTFSC  03.0
0284:  INCF   65,F
0285:  MOVF   63,W
0286:  MOVWF  67
0287:  MOVF   62,W
0288:  MOVWF  66
0289:  MOVF   64,W
028A:  MOVWF  68
028B:  CALL   124
028C:  MOVLW  30
028D:  ADDWF  60,W
028E:  MOVWF  62
028F:  MOVF   61,W
0290:  MOVWF  63
0291:  BTFSC  03.0
0292:  INCF   63,F
0293:  MOVF   63,W
0294:  MOVWF  65
0295:  MOVF   62,W
0296:  MOVWF  64
0297:  CALL   0E6
....................                      //lcd_putchar('9');// Hien thi ra LCD so 9 
....................                      
....................                  } 
....................                   else  if(cot4==1){lcd_putcmd(clear_scr); 
0298:  GOTO   324
0299:  BTFSS  06.7
029A:  GOTO   324
029B:  MOVLW  01
029C:  MOVWF  6B
029D:  CALL   0AA
....................                            
....................                            if (ok==0) 
029E:  MOVF   2F,F
029F:  BTFSS  03.2
02A0:  GOTO   2AB
02A1:  MOVF   30,F
02A2:  BTFSS  03.2
02A3:  GOTO   2AB
....................                            { 
....................                               pt=4; 
02A4:  CLRF   32
02A5:  MOVLW  04
02A6:  MOVWF  31
....................                               ok=1;                               
02A7:  CLRF   30
02A8:  MOVLW  01
02A9:  MOVWF  2F
....................                            } 
....................                            else 
02AA:  GOTO   30F
....................                            { 
....................                               switch (pt) 
....................                               { 
02AB:  MOVF   31,W
02AC:  MOVWF  77
02AD:  MOVF   32,W
02AE:  MOVWF  7A
02AF:  MOVF   7A,W
02B0:  BTFSS  03.2
02B1:  GOTO   2B6
02B2:  MOVLW  01
02B3:  SUBWF  77,W
02B4:  BTFSC  03.2
02B5:  GOTO   2CC
02B6:  MOVF   7A,W
02B7:  BTFSS  03.2
02B8:  GOTO   2BD
02B9:  MOVLW  02
02BA:  SUBWF  77,W
02BB:  BTFSC  03.2
02BC:  GOTO   2DA
02BD:  MOVF   7A,W
02BE:  BTFSS  03.2
02BF:  GOTO   2C4
02C0:  MOVLW  03
02C1:  SUBWF  77,W
02C2:  BTFSC  03.2
02C3:  GOTO   2E8
02C4:  MOVF   7A,W
02C5:  BTFSS  03.2
02C6:  GOTO   2CB
02C7:  MOVLW  04
02C8:  SUBWF  77,W
02C9:  BTFSC  03.2
02CA:  GOTO   2FA
02CB:  GOTO   30C
....................                                  case 1: kq=(kq1+kq2); kq1=kq; break; 
02CC:  MOVF   60,W
02CD:  ADDWF  5E,W
02CE:  MOVWF  5C
02CF:  MOVF   5F,W
02D0:  MOVWF  5D
02D1:  MOVF   61,W
02D2:  BTFSC  03.0
02D3:  INCFSZ 61,W
02D4:  ADDWF  5D,F
02D5:  MOVF   5D,W
02D6:  MOVWF  5F
02D7:  MOVF   5C,W
02D8:  MOVWF  5E
02D9:  GOTO   30C
....................                                  case 2: kq=kq1-kq2; kq1=kq; break; 
02DA:  MOVF   60,W
02DB:  SUBWF  5E,W
02DC:  MOVWF  5C
02DD:  MOVF   5F,W
02DE:  MOVWF  5D
02DF:  MOVF   61,W
02E0:  BTFSS  03.0
02E1:  INCFSZ 61,W
02E2:  SUBWF  5D,F
02E3:  MOVF   5D,W
02E4:  MOVWF  5F
02E5:  MOVF   5C,W
02E6:  MOVWF  5E
02E7:  GOTO   30C
....................                                  case 3: kq=kq1*kq2; kq1=kq; break; 
02E8:  MOVF   5F,W
02E9:  MOVWF  63
02EA:  MOVF   5E,W
02EB:  MOVWF  62
02EC:  MOVF   61,W
02ED:  MOVWF  65
02EE:  MOVF   60,W
02EF:  MOVWF  64
02F0:  CALL   04F
02F1:  MOVF   79,W
02F2:  MOVWF  5D
02F3:  MOVF   78,W
02F4:  MOVWF  5C
02F5:  MOVF   5D,W
02F6:  MOVWF  5F
02F7:  MOVF   5C,W
02F8:  MOVWF  5E
02F9:  GOTO   30C
....................                                  case 4: kq=kq1/kq2; kq1=kq; break;                               
02FA:  MOVF   5F,W
02FB:  MOVWF  6A
02FC:  MOVF   5E,W
02FD:  MOVWF  69
02FE:  MOVF   61,W
02FF:  MOVWF  6C
0300:  MOVF   60,W
0301:  MOVWF  6B
0302:  CALL   0B5
0303:  MOVF   79,W
0304:  MOVWF  5D
0305:  MOVF   78,W
0306:  MOVWF  5C
0307:  MOVF   5D,W
0308:  MOVWF  5F
0309:  MOVF   5C,W
030A:  MOVWF  5E
030B:  GOTO   30C
....................                               } 
....................                               pt=4;                             
030C:  CLRF   32
030D:  MOVLW  04
030E:  MOVWF  31
....................                             } 
....................                             write_line1(kq1+48,pt+48); 
030F:  MOVLW  30
0310:  ADDWF  5E,W
0311:  MOVWF  62
0312:  MOVF   5F,W
0313:  MOVWF  63
0314:  BTFSC  03.0
0315:  INCF   63,F
0316:  MOVLW  30
0317:  ADDWF  31,W
0318:  MOVWF  64
0319:  MOVF   32,W
031A:  MOVWF  65
031B:  BTFSC  03.0
031C:  INCF   65,F
031D:  MOVF   63,W
031E:  MOVWF  67
031F:  MOVF   62,W
0320:  MOVWF  66
0321:  MOVF   64,W
0322:  MOVWF  68
0323:  CALL   124
....................                            
....................                            //lcd_putchar(':');// Hien thi ra LCD ky tu : 
....................                            
....................                         } 
....................   } 
....................   else if(hang2==1){   
0324:  GOTO   7DC
0325:  BTFSS  06.1
0326:  GOTO   4A3
....................          if(cot1==1){ 
0327:  BTFSS  06.4
0328:  GOTO   367
....................              
....................                      if (ok==0)  
0329:  MOVF   2F,F
032A:  BTFSS  03.2
032B:  GOTO   34B
032C:  MOVF   30,F
032D:  BTFSS  03.2
032E:  GOTO   34B
....................                      {      kq1=kq1*10+4;write_line2(kq1+48);} 
032F:  MOVF   5F,W
0330:  MOVWF  63
0331:  MOVF   5E,W
0332:  MOVWF  62
0333:  CLRF   65
0334:  MOVLW  0A
0335:  MOVWF  64
0336:  CALL   04F
0337:  MOVLW  04
0338:  ADDWF  78,W
0339:  MOVWF  5E
033A:  MOVF   79,W
033B:  MOVWF  5F
033C:  BTFSC  03.0
033D:  INCF   5F,F
033E:  MOVLW  30
033F:  ADDWF  5E,W
0340:  MOVWF  62
0341:  MOVF   5F,W
0342:  MOVWF  63
0343:  BTFSC  03.0
0344:  INCF   63,F
0345:  MOVF   63,W
0346:  MOVWF  65
0347:  MOVF   62,W
0348:  MOVWF  64
0349:  CALL   0E6
....................                      else  {kq2=kq2*10+4;write_line2(kq1+48);} 
034A:  GOTO   366
034B:  MOVF   61,W
034C:  MOVWF  63
034D:  MOVF   60,W
034E:  MOVWF  62
034F:  CLRF   65
0350:  MOVLW  0A
0351:  MOVWF  64
0352:  CALL   04F
0353:  MOVLW  04
0354:  ADDWF  78,W
0355:  MOVWF  60
0356:  MOVF   79,W
0357:  MOVWF  61
0358:  BTFSC  03.0
0359:  INCF   61,F
035A:  MOVLW  30
035B:  ADDWF  5E,W
035C:  MOVWF  62
035D:  MOVF   5F,W
035E:  MOVWF  63
035F:  BTFSC  03.0
0360:  INCF   63,F
0361:  MOVF   63,W
0362:  MOVWF  65
0363:  MOVF   62,W
0364:  MOVWF  64
0365:  CALL   0E6
....................  
....................             //lcd_putchar('4');// Hien thi ra LCD so 4 
....................             
....................          } 
....................          else  if(cot2==1){lcd_putcmd(clear_scr); 
0366:  GOTO   4A2
0367:  BTFSS  06.5
0368:  GOTO   3BF
0369:  MOVLW  01
036A:  MOVWF  6B
036B:  CALL   0AA
....................                  
....................                      if (ok==0)  
036C:  MOVF   2F,F
036D:  BTFSS  03.2
036E:  GOTO   38E
036F:  MOVF   30,F
0370:  BTFSS  03.2
0371:  GOTO   38E
....................                      {      kq1=kq1*10+5;write_line2(kq1+48);} 
0372:  MOVF   5F,W
0373:  MOVWF  63
0374:  MOVF   5E,W
0375:  MOVWF  62
0376:  CLRF   65
0377:  MOVLW  0A
0378:  MOVWF  64
0379:  CALL   04F
037A:  MOVLW  05
037B:  ADDWF  78,W
037C:  MOVWF  5E
037D:  MOVF   79,W
037E:  MOVWF  5F
037F:  BTFSC  03.0
0380:  INCF   5F,F
0381:  MOVLW  30
0382:  ADDWF  5E,W
0383:  MOVWF  62
0384:  MOVF   5F,W
0385:  MOVWF  63
0386:  BTFSC  03.0
0387:  INCF   63,F
0388:  MOVF   63,W
0389:  MOVWF  65
038A:  MOVF   62,W
038B:  MOVWF  64
038C:  CALL   0E6
....................                      else  {kq2=kq2*10+5;write_line1(kq1+48,pt+48);write_line2(kq2+48);} 
038D:  GOTO   3BE
038E:  MOVF   61,W
038F:  MOVWF  63
0390:  MOVF   60,W
0391:  MOVWF  62
0392:  CLRF   65
0393:  MOVLW  0A
0394:  MOVWF  64
0395:  CALL   04F
0396:  MOVLW  05
0397:  ADDWF  78,W
0398:  MOVWF  60
0399:  MOVF   79,W
039A:  MOVWF  61
039B:  BTFSC  03.0
039C:  INCF   61,F
039D:  MOVLW  30
039E:  ADDWF  5E,W
039F:  MOVWF  62
03A0:  MOVF   5F,W
03A1:  MOVWF  63
03A2:  BTFSC  03.0
03A3:  INCF   63,F
03A4:  MOVLW  30
03A5:  ADDWF  31,W
03A6:  MOVWF  64
03A7:  MOVF   32,W
03A8:  MOVWF  65
03A9:  BTFSC  03.0
03AA:  INCF   65,F
03AB:  MOVF   63,W
03AC:  MOVWF  67
03AD:  MOVF   62,W
03AE:  MOVWF  66
03AF:  MOVF   64,W
03B0:  MOVWF  68
03B1:  CALL   124
03B2:  MOVLW  30
03B3:  ADDWF  60,W
03B4:  MOVWF  62
03B5:  MOVF   61,W
03B6:  MOVWF  63
03B7:  BTFSC  03.0
03B8:  INCF   63,F
03B9:  MOVF   63,W
03BA:  MOVWF  65
03BB:  MOVF   62,W
03BC:  MOVWF  64
03BD:  CALL   0E6
....................  
....................                 //lcd_putchar('5');// Hien thi ra LCD so 5 
....................                  
....................                } 
....................                else  if(cot3==1){lcd_putcmd(clear_scr); 
03BE:  GOTO   4A2
03BF:  BTFSS  06.6
03C0:  GOTO   417
03C1:  MOVLW  01
03C2:  MOVWF  6B
03C3:  CALL   0AA
....................                         
....................                      if (ok==0)  
03C4:  MOVF   2F,F
03C5:  BTFSS  03.2
03C6:  GOTO   3E6
03C7:  MOVF   30,F
03C8:  BTFSS  03.2
03C9:  GOTO   3E6
....................                      {      kq1=kq1*10+6;write_line2(kq1+48);} 
03CA:  MOVF   5F,W
03CB:  MOVWF  63
03CC:  MOVF   5E,W
03CD:  MOVWF  62
03CE:  CLRF   65
03CF:  MOVLW  0A
03D0:  MOVWF  64
03D1:  CALL   04F
03D2:  MOVLW  06
03D3:  ADDWF  78,W
03D4:  MOVWF  5E
03D5:  MOVF   79,W
03D6:  MOVWF  5F
03D7:  BTFSC  03.0
03D8:  INCF   5F,F
03D9:  MOVLW  30
03DA:  ADDWF  5E,W
03DB:  MOVWF  62
03DC:  MOVF   5F,W
03DD:  MOVWF  63
03DE:  BTFSC  03.0
03DF:  INCF   63,F
03E0:  MOVF   63,W
03E1:  MOVWF  65
03E2:  MOVF   62,W
03E3:  MOVWF  64
03E4:  CALL   0E6
....................                      else  {kq2=kq2*10+6;write_line1(kq1+48,pt+48);write_line2(kq2+48);} 
03E5:  GOTO   416
03E6:  MOVF   61,W
03E7:  MOVWF  63
03E8:  MOVF   60,W
03E9:  MOVWF  62
03EA:  CLRF   65
03EB:  MOVLW  0A
03EC:  MOVWF  64
03ED:  CALL   04F
03EE:  MOVLW  06
03EF:  ADDWF  78,W
03F0:  MOVWF  60
03F1:  MOVF   79,W
03F2:  MOVWF  61
03F3:  BTFSC  03.0
03F4:  INCF   61,F
03F5:  MOVLW  30
03F6:  ADDWF  5E,W
03F7:  MOVWF  62
03F8:  MOVF   5F,W
03F9:  MOVWF  63
03FA:  BTFSC  03.0
03FB:  INCF   63,F
03FC:  MOVLW  30
03FD:  ADDWF  31,W
03FE:  MOVWF  64
03FF:  MOVF   32,W
0400:  MOVWF  65
0401:  BTFSC  03.0
0402:  INCF   65,F
0403:  MOVF   63,W
0404:  MOVWF  67
0405:  MOVF   62,W
0406:  MOVWF  66
0407:  MOVF   64,W
0408:  MOVWF  68
0409:  CALL   124
040A:  MOVLW  30
040B:  ADDWF  60,W
040C:  MOVWF  62
040D:  MOVF   61,W
040E:  MOVWF  63
040F:  BTFSC  03.0
0410:  INCF   63,F
0411:  MOVF   63,W
0412:  MOVWF  65
0413:  MOVF   62,W
0414:  MOVWF  64
0415:  CALL   0E6
....................  
....................                         //lcd_putchar('6');// Hien thi ra LCD so 6 
....................                      
....................                      } 
....................                      else  if(cot4==1){lcd_putcmd(clear_scr); 
0416:  GOTO   4A2
0417:  BTFSS  06.7
0418:  GOTO   4A2
0419:  MOVLW  01
041A:  MOVWF  6B
041B:  CALL   0AA
....................                               
....................                               if (ok==0) 
041C:  MOVF   2F,F
041D:  BTFSS  03.2
041E:  GOTO   429
041F:  MOVF   30,F
0420:  BTFSS  03.2
0421:  GOTO   429
....................                               { 
....................                                  pt=3; 
0422:  CLRF   32
0423:  MOVLW  03
0424:  MOVWF  31
....................                                  ok=1;                                  
0425:  CLRF   30
0426:  MOVLW  01
0427:  MOVWF  2F
....................                               } 
....................                               else 
0428:  GOTO   48D
....................                               { 
....................                                  switch (pt) 
....................                                  { 
0429:  MOVF   31,W
042A:  MOVWF  77
042B:  MOVF   32,W
042C:  MOVWF  7A
042D:  MOVF   7A,W
042E:  BTFSS  03.2
042F:  GOTO   434
0430:  MOVLW  01
0431:  SUBWF  77,W
0432:  BTFSC  03.2
0433:  GOTO   44A
0434:  MOVF   7A,W
0435:  BTFSS  03.2
0436:  GOTO   43B
0437:  MOVLW  02
0438:  SUBWF  77,W
0439:  BTFSC  03.2
043A:  GOTO   458
043B:  MOVF   7A,W
043C:  BTFSS  03.2
043D:  GOTO   442
043E:  MOVLW  03
043F:  SUBWF  77,W
0440:  BTFSC  03.2
0441:  GOTO   466
0442:  MOVF   7A,W
0443:  BTFSS  03.2
0444:  GOTO   449
0445:  MOVLW  04
0446:  SUBWF  77,W
0447:  BTFSC  03.2
0448:  GOTO   478
0449:  GOTO   48A
....................                                     case 1: kq=(kq1+kq2); kq1=kq; break; 
044A:  MOVF   60,W
044B:  ADDWF  5E,W
044C:  MOVWF  5C
044D:  MOVF   5F,W
044E:  MOVWF  5D
044F:  MOVF   61,W
0450:  BTFSC  03.0
0451:  INCFSZ 61,W
0452:  ADDWF  5D,F
0453:  MOVF   5D,W
0454:  MOVWF  5F
0455:  MOVF   5C,W
0456:  MOVWF  5E
0457:  GOTO   48A
....................                                     case 2: kq=kq1-kq2; kq1=kq; break; 
0458:  MOVF   60,W
0459:  SUBWF  5E,W
045A:  MOVWF  5C
045B:  MOVF   5F,W
045C:  MOVWF  5D
045D:  MOVF   61,W
045E:  BTFSS  03.0
045F:  INCFSZ 61,W
0460:  SUBWF  5D,F
0461:  MOVF   5D,W
0462:  MOVWF  5F
0463:  MOVF   5C,W
0464:  MOVWF  5E
0465:  GOTO   48A
....................                                     case 3: kq=kq1*kq2; kq1=kq; break; 
0466:  MOVF   5F,W
0467:  MOVWF  63
0468:  MOVF   5E,W
0469:  MOVWF  62
046A:  MOVF   61,W
046B:  MOVWF  65
046C:  MOVF   60,W
046D:  MOVWF  64
046E:  CALL   04F
046F:  MOVF   79,W
0470:  MOVWF  5D
0471:  MOVF   78,W
0472:  MOVWF  5C
0473:  MOVF   5D,W
0474:  MOVWF  5F
0475:  MOVF   5C,W
0476:  MOVWF  5E
0477:  GOTO   48A
....................                                     case 4: kq=kq1/kq2; kq1=kq; break;                               
0478:  MOVF   5F,W
0479:  MOVWF  6A
047A:  MOVF   5E,W
047B:  MOVWF  69
047C:  MOVF   61,W
047D:  MOVWF  6C
047E:  MOVF   60,W
047F:  MOVWF  6B
0480:  CALL   0B5
0481:  MOVF   79,W
0482:  MOVWF  5D
0483:  MOVF   78,W
0484:  MOVWF  5C
0485:  MOVF   5D,W
0486:  MOVWF  5F
0487:  MOVF   5C,W
0488:  MOVWF  5E
0489:  GOTO   48A
....................                                  } 
....................                               pt=3;                             
048A:  CLRF   32
048B:  MOVLW  03
048C:  MOVWF  31
....................                               } 
....................                               write_line1(kq1+48,pt+48); 
048D:  MOVLW  30
048E:  ADDWF  5E,W
048F:  MOVWF  62
0490:  MOVF   5F,W
0491:  MOVWF  63
0492:  BTFSC  03.0
0493:  INCF   63,F
0494:  MOVLW  30
0495:  ADDWF  31,W
0496:  MOVWF  64
0497:  MOVF   32,W
0498:  MOVWF  65
0499:  BTFSC  03.0
049A:  INCF   65,F
049B:  MOVF   63,W
049C:  MOVWF  67
049D:  MOVF   62,W
049E:  MOVWF  66
049F:  MOVF   64,W
04A0:  MOVWF  68
04A1:  CALL   124
....................                              
....................                               //lcd_putchar('x');// Hien thi ra LCD ki tu x 
....................                           
....................                            } 
....................        } 
....................  else if(hang3==1){ 
04A2:  GOTO   7DC
04A3:  BTFSS  06.2
04A4:  GOTO   639
....................                   if(cot1==1){lcd_putcmd(clear_scr); 
04A5:  BTFSS  06.4
04A6:  GOTO   4FD
04A7:  MOVLW  01
04A8:  MOVWF  6B
04A9:  CALL   0AA
....................                       
....................                      if (ok==0)  
04AA:  MOVF   2F,F
04AB:  BTFSS  03.2
04AC:  GOTO   4CC
04AD:  MOVF   30,F
04AE:  BTFSS  03.2
04AF:  GOTO   4CC
....................                      {      kq1=kq1*10+1;write_line2(kq1+48);} 
04B0:  MOVF   5F,W
04B1:  MOVWF  63
04B2:  MOVF   5E,W
04B3:  MOVWF  62
04B4:  CLRF   65
04B5:  MOVLW  0A
04B6:  MOVWF  64
04B7:  CALL   04F
04B8:  MOVLW  01
04B9:  ADDWF  78,W
04BA:  MOVWF  5E
04BB:  MOVF   79,W
04BC:  MOVWF  5F
04BD:  BTFSC  03.0
04BE:  INCF   5F,F
04BF:  MOVLW  30
04C0:  ADDWF  5E,W
04C1:  MOVWF  62
04C2:  MOVF   5F,W
04C3:  MOVWF  63
04C4:  BTFSC  03.0
04C5:  INCF   63,F
04C6:  MOVF   63,W
04C7:  MOVWF  65
04C8:  MOVF   62,W
04C9:  MOVWF  64
04CA:  CALL   0E6
....................                      else  {kq2=kq2*10+1;write_line1(kq1+48,pt+48);write_line2(kq1+48);} 
04CB:  GOTO   4FC
04CC:  MOVF   61,W
04CD:  MOVWF  63
04CE:  MOVF   60,W
04CF:  MOVWF  62
04D0:  CLRF   65
04D1:  MOVLW  0A
04D2:  MOVWF  64
04D3:  CALL   04F
04D4:  MOVLW  01
04D5:  ADDWF  78,W
04D6:  MOVWF  60
04D7:  MOVF   79,W
04D8:  MOVWF  61
04D9:  BTFSC  03.0
04DA:  INCF   61,F
04DB:  MOVLW  30
04DC:  ADDWF  5E,W
04DD:  MOVWF  62
04DE:  MOVF   5F,W
04DF:  MOVWF  63
04E0:  BTFSC  03.0
04E1:  INCF   63,F
04E2:  MOVLW  30
04E3:  ADDWF  31,W
04E4:  MOVWF  64
04E5:  MOVF   32,W
04E6:  MOVWF  65
04E7:  BTFSC  03.0
04E8:  INCF   65,F
04E9:  MOVF   63,W
04EA:  MOVWF  67
04EB:  MOVF   62,W
04EC:  MOVWF  66
04ED:  MOVF   64,W
04EE:  MOVWF  68
04EF:  CALL   124
04F0:  MOVLW  30
04F1:  ADDWF  5E,W
04F2:  MOVWF  62
04F3:  MOVF   5F,W
04F4:  MOVWF  63
04F5:  BTFSC  03.0
04F6:  INCF   63,F
04F7:  MOVF   63,W
04F8:  MOVWF  65
04F9:  MOVF   62,W
04FA:  MOVWF  64
04FB:  CALL   0E6
....................                      //lcd_putchar('1');// Hien thi ra LCD so 1 
....................                     
....................                   } 
....................                   else  if(cot2==1){lcd_putcmd(clear_scr); 
04FC:  GOTO   638
04FD:  BTFSS  06.5
04FE:  GOTO   555
04FF:  MOVLW  01
0500:  MOVWF  6B
0501:  CALL   0AA
....................                             
....................                      if (ok==0)  
0502:  MOVF   2F,F
0503:  BTFSS  03.2
0504:  GOTO   524
0505:  MOVF   30,F
0506:  BTFSS  03.2
0507:  GOTO   524
....................                      {      kq1=kq1*10+2;write_line2(kq1+48);} 
0508:  MOVF   5F,W
0509:  MOVWF  63
050A:  MOVF   5E,W
050B:  MOVWF  62
050C:  CLRF   65
050D:  MOVLW  0A
050E:  MOVWF  64
050F:  CALL   04F
0510:  MOVLW  02
0511:  ADDWF  78,W
0512:  MOVWF  5E
0513:  MOVF   79,W
0514:  MOVWF  5F
0515:  BTFSC  03.0
0516:  INCF   5F,F
0517:  MOVLW  30
0518:  ADDWF  5E,W
0519:  MOVWF  62
051A:  MOVF   5F,W
051B:  MOVWF  63
051C:  BTFSC  03.0
051D:  INCF   63,F
051E:  MOVF   63,W
051F:  MOVWF  65
0520:  MOVF   62,W
0521:  MOVWF  64
0522:  CALL   0E6
....................                      else  {kq2=kq2*10+2;write_line1(kq1+48,pt+48);write_line2(kq1+48);} 
0523:  GOTO   554
0524:  MOVF   61,W
0525:  MOVWF  63
0526:  MOVF   60,W
0527:  MOVWF  62
0528:  CLRF   65
0529:  MOVLW  0A
052A:  MOVWF  64
052B:  CALL   04F
052C:  MOVLW  02
052D:  ADDWF  78,W
052E:  MOVWF  60
052F:  MOVF   79,W
0530:  MOVWF  61
0531:  BTFSC  03.0
0532:  INCF   61,F
0533:  MOVLW  30
0534:  ADDWF  5E,W
0535:  MOVWF  62
0536:  MOVF   5F,W
0537:  MOVWF  63
0538:  BTFSC  03.0
0539:  INCF   63,F
053A:  MOVLW  30
053B:  ADDWF  31,W
053C:  MOVWF  64
053D:  MOVF   32,W
053E:  MOVWF  65
053F:  BTFSC  03.0
0540:  INCF   65,F
0541:  MOVF   63,W
0542:  MOVWF  67
0543:  MOVF   62,W
0544:  MOVWF  66
0545:  MOVF   64,W
0546:  MOVWF  68
0547:  CALL   124
0548:  MOVLW  30
0549:  ADDWF  5E,W
054A:  MOVWF  62
054B:  MOVF   5F,W
054C:  MOVWF  63
054D:  BTFSC  03.0
054E:  INCF   63,F
054F:  MOVF   63,W
0550:  MOVWF  65
0551:  MOVF   62,W
0552:  MOVWF  64
0553:  CALL   0E6
....................                            //lcd_putchar('2');// Hien thi ra LCD so 2 
....................                       
....................                         } 
....................                         else if(cot3==1){lcd_putcmd(clear_scr); 
0554:  GOTO   638
0555:  BTFSS  06.6
0556:  GOTO   5AD
0557:  MOVLW  01
0558:  MOVWF  6B
0559:  CALL   0AA
....................                                   
....................                      if (ok==0)  
055A:  MOVF   2F,F
055B:  BTFSS  03.2
055C:  GOTO   57C
055D:  MOVF   30,F
055E:  BTFSS  03.2
055F:  GOTO   57C
....................                      {      kq1=kq1*10+3;write_line2(kq1+48);} 
0560:  MOVF   5F,W
0561:  MOVWF  63
0562:  MOVF   5E,W
0563:  MOVWF  62
0564:  CLRF   65
0565:  MOVLW  0A
0566:  MOVWF  64
0567:  CALL   04F
0568:  MOVLW  03
0569:  ADDWF  78,W
056A:  MOVWF  5E
056B:  MOVF   79,W
056C:  MOVWF  5F
056D:  BTFSC  03.0
056E:  INCF   5F,F
056F:  MOVLW  30
0570:  ADDWF  5E,W
0571:  MOVWF  62
0572:  MOVF   5F,W
0573:  MOVWF  63
0574:  BTFSC  03.0
0575:  INCF   63,F
0576:  MOVF   63,W
0577:  MOVWF  65
0578:  MOVF   62,W
0579:  MOVWF  64
057A:  CALL   0E6
....................                      else  {kq2=kq2*10+3;write_line1(kq1+48,pt+48);write_line2(kq1+48);} 
057B:  GOTO   5AC
057C:  MOVF   61,W
057D:  MOVWF  63
057E:  MOVF   60,W
057F:  MOVWF  62
0580:  CLRF   65
0581:  MOVLW  0A
0582:  MOVWF  64
0583:  CALL   04F
0584:  MOVLW  03
0585:  ADDWF  78,W
0586:  MOVWF  60
0587:  MOVF   79,W
0588:  MOVWF  61
0589:  BTFSC  03.0
058A:  INCF   61,F
058B:  MOVLW  30
058C:  ADDWF  5E,W
058D:  MOVWF  62
058E:  MOVF   5F,W
058F:  MOVWF  63
0590:  BTFSC  03.0
0591:  INCF   63,F
0592:  MOVLW  30
0593:  ADDWF  31,W
0594:  MOVWF  64
0595:  MOVF   32,W
0596:  MOVWF  65
0597:  BTFSC  03.0
0598:  INCF   65,F
0599:  MOVF   63,W
059A:  MOVWF  67
059B:  MOVF   62,W
059C:  MOVWF  66
059D:  MOVF   64,W
059E:  MOVWF  68
059F:  CALL   124
05A0:  MOVLW  30
05A1:  ADDWF  5E,W
05A2:  MOVWF  62
05A3:  MOVF   5F,W
05A4:  MOVWF  63
05A5:  BTFSC  03.0
05A6:  INCF   63,F
05A7:  MOVF   63,W
05A8:  MOVWF  65
05A9:  MOVF   62,W
05AA:  MOVWF  64
05AB:  CALL   0E6
....................                                  //lcd_putchar('3');// Hien thi ra LCD so 3 
....................                               
....................                               } 
....................                               else if(cot4==1){ 
05AC:  GOTO   638
05AD:  BTFSS  06.7
05AE:  GOTO   638
....................                                       lcd_putcmd(clear_scr); 
05AF:  MOVLW  01
05B0:  MOVWF  6B
05B1:  CALL   0AA
....................                                        if (ok==0) 
05B2:  MOVF   2F,F
05B3:  BTFSS  03.2
05B4:  GOTO   5BF
05B5:  MOVF   30,F
05B6:  BTFSS  03.2
05B7:  GOTO   5BF
....................                                        { 
....................                                           pt=2; 
05B8:  CLRF   32
05B9:  MOVLW  02
05BA:  MOVWF  31
....................                                           ok=1; 
05BB:  CLRF   30
05BC:  MOVLW  01
05BD:  MOVWF  2F
....................                                        } 
....................                                        else 
05BE:  GOTO   623
....................                                        { 
....................                                           switch (pt) 
....................                                           { 
05BF:  MOVF   31,W
05C0:  MOVWF  77
05C1:  MOVF   32,W
05C2:  MOVWF  7A
05C3:  MOVF   7A,W
05C4:  BTFSS  03.2
05C5:  GOTO   5CA
05C6:  MOVLW  01
05C7:  SUBWF  77,W
05C8:  BTFSC  03.2
05C9:  GOTO   5E0
05CA:  MOVF   7A,W
05CB:  BTFSS  03.2
05CC:  GOTO   5D1
05CD:  MOVLW  02
05CE:  SUBWF  77,W
05CF:  BTFSC  03.2
05D0:  GOTO   5EE
05D1:  MOVF   7A,W
05D2:  BTFSS  03.2
05D3:  GOTO   5D8
05D4:  MOVLW  03
05D5:  SUBWF  77,W
05D6:  BTFSC  03.2
05D7:  GOTO   5FC
05D8:  MOVF   7A,W
05D9:  BTFSS  03.2
05DA:  GOTO   5DF
05DB:  MOVLW  04
05DC:  SUBWF  77,W
05DD:  BTFSC  03.2
05DE:  GOTO   60E
05DF:  GOTO   620
....................                                              case 1: kq=(kq1+kq2); kq1=kq; break; 
05E0:  MOVF   60,W
05E1:  ADDWF  5E,W
05E2:  MOVWF  5C
05E3:  MOVF   5F,W
05E4:  MOVWF  5D
05E5:  MOVF   61,W
05E6:  BTFSC  03.0
05E7:  INCFSZ 61,W
05E8:  ADDWF  5D,F
05E9:  MOVF   5D,W
05EA:  MOVWF  5F
05EB:  MOVF   5C,W
05EC:  MOVWF  5E
05ED:  GOTO   620
....................                                              case 2: kq=kq1-kq2; kq1=kq; break; 
05EE:  MOVF   60,W
05EF:  SUBWF  5E,W
05F0:  MOVWF  5C
05F1:  MOVF   5F,W
05F2:  MOVWF  5D
05F3:  MOVF   61,W
05F4:  BTFSS  03.0
05F5:  INCFSZ 61,W
05F6:  SUBWF  5D,F
05F7:  MOVF   5D,W
05F8:  MOVWF  5F
05F9:  MOVF   5C,W
05FA:  MOVWF  5E
05FB:  GOTO   620
....................                                              case 3: kq=kq1*kq2; kq1=kq; break; 
05FC:  MOVF   5F,W
05FD:  MOVWF  63
05FE:  MOVF   5E,W
05FF:  MOVWF  62
0600:  MOVF   61,W
0601:  MOVWF  65
0602:  MOVF   60,W
0603:  MOVWF  64
0604:  CALL   04F
0605:  MOVF   79,W
0606:  MOVWF  5D
0607:  MOVF   78,W
0608:  MOVWF  5C
0609:  MOVF   5D,W
060A:  MOVWF  5F
060B:  MOVF   5C,W
060C:  MOVWF  5E
060D:  GOTO   620
....................                                              case 4: kq=kq1/kq2; kq1=kq; break;                               
060E:  MOVF   5F,W
060F:  MOVWF  6A
0610:  MOVF   5E,W
0611:  MOVWF  69
0612:  MOVF   61,W
0613:  MOVWF  6C
0614:  MOVF   60,W
0615:  MOVWF  6B
0616:  CALL   0B5
0617:  MOVF   79,W
0618:  MOVWF  5D
0619:  MOVF   78,W
061A:  MOVWF  5C
061B:  MOVF   5D,W
061C:  MOVWF  5F
061D:  MOVF   5C,W
061E:  MOVWF  5E
061F:  GOTO   620
....................                                           } 
....................                                        pt=2;                             
0620:  CLRF   32
0621:  MOVLW  02
0622:  MOVWF  31
....................                                        } 
....................                                        write_line1(kq1+48,pt+48); 
0623:  MOVLW  30
0624:  ADDWF  5E,W
0625:  MOVWF  62
0626:  MOVF   5F,W
0627:  MOVWF  63
0628:  BTFSC  03.0
0629:  INCF   63,F
062A:  MOVLW  30
062B:  ADDWF  31,W
062C:  MOVWF  64
062D:  MOVF   32,W
062E:  MOVWF  65
062F:  BTFSC  03.0
0630:  INCF   65,F
0631:  MOVF   63,W
0632:  MOVWF  67
0633:  MOVF   62,W
0634:  MOVWF  66
0635:  MOVF   64,W
0636:  MOVWF  68
0637:  CALL   124
....................                                        
....................                                        //lcd_putchar('-');// Hien thi ra LCD ky tu - 
....................                                        
....................                                     }         
.................... } 
....................  
....................   else if(hang4==1){   
0638:  GOTO   7DC
0639:  BTFSS  06.3
063A:  GOTO   7DC
....................          if(cot1==1){lcd_putcmd(clear_scr); 
063B:  BTFSS  06.4
063C:  GOTO   679
063D:  MOVLW  01
063E:  MOVWF  6B
063F:  CALL   0AA
....................              
....................                      if (ok==0)  
0640:  MOVF   2F,F
0641:  BTFSS  03.2
0642:  GOTO   655
0643:  MOVF   30,F
0644:  BTFSS  03.2
0645:  GOTO   655
....................                      {      kq1=0;write_line2(kq1+48);} 
0646:  CLRF   5F
0647:  CLRF   5E
0648:  MOVLW  30
0649:  ADDWF  5E,W
064A:  MOVWF  62
064B:  MOVF   5F,W
064C:  MOVWF  63
064D:  BTFSC  03.0
064E:  INCF   63,F
064F:  MOVF   63,W
0650:  MOVWF  65
0651:  MOVF   62,W
0652:  MOVWF  64
0653:  CALL   0E6
....................                      else  {kq2=0;write_line1(kq1+48,pt+48);write_line2(kq1+48);} 
0654:  GOTO   678
0655:  CLRF   61
0656:  CLRF   60
0657:  MOVLW  30
0658:  ADDWF  5E,W
0659:  MOVWF  62
065A:  MOVF   5F,W
065B:  MOVWF  63
065C:  BTFSC  03.0
065D:  INCF   63,F
065E:  MOVLW  30
065F:  ADDWF  31,W
0660:  MOVWF  64
0661:  MOVF   32,W
0662:  MOVWF  65
0663:  BTFSC  03.0
0664:  INCF   65,F
0665:  MOVF   63,W
0666:  MOVWF  67
0667:  MOVF   62,W
0668:  MOVWF  66
0669:  MOVF   64,W
066A:  MOVWF  68
066B:  CALL   124
066C:  MOVLW  30
066D:  ADDWF  5E,W
066E:  MOVWF  62
066F:  MOVF   5F,W
0670:  MOVWF  63
0671:  BTFSC  03.0
0672:  INCF   63,F
0673:  MOVF   63,W
0674:  MOVWF  65
0675:  MOVF   62,W
0676:  MOVWF  64
0677:  CALL   0E6
....................             //lcd_putchar('.');// Hien thi ra LCD so . 
....................          } 
....................          else  if(cot2==1){lcd_putcmd(clear_scr); 
0678:  GOTO   7DC
0679:  BTFSS  06.5
067A:  GOTO   6CB
067B:  MOVLW  01
067C:  MOVWF  6B
067D:  CALL   0AA
....................                 
....................                      if (ok==0)  
067E:  MOVF   2F,F
067F:  BTFSS  03.2
0680:  GOTO   69D
0681:  MOVF   30,F
0682:  BTFSS  03.2
0683:  GOTO   69D
....................                      {      kq1=kq1*10+0;write_line2(kq1+48);} 
0684:  MOVF   5F,W
0685:  MOVWF  63
0686:  MOVF   5E,W
0687:  MOVWF  62
0688:  CLRF   65
0689:  MOVLW  0A
068A:  MOVWF  64
068B:  CALL   04F
068C:  MOVF   79,W
068D:  MOVWF  5F
068E:  MOVF   78,W
068F:  MOVWF  5E
0690:  MOVLW  30
0691:  ADDWF  5E,W
0692:  MOVWF  62
0693:  MOVF   5F,W
0694:  MOVWF  63
0695:  BTFSC  03.0
0696:  INCF   63,F
0697:  MOVF   63,W
0698:  MOVWF  65
0699:  MOVF   62,W
069A:  MOVWF  64
069B:  CALL   0E6
....................                      else  {kq2=kq2*10+0;write_line1(kq1+48,pt+48);write_line2(kq1+48);} 
069C:  GOTO   6CA
069D:  MOVF   61,W
069E:  MOVWF  63
069F:  MOVF   60,W
06A0:  MOVWF  62
06A1:  CLRF   65
06A2:  MOVLW  0A
06A3:  MOVWF  64
06A4:  CALL   04F
06A5:  MOVF   79,W
06A6:  MOVWF  61
06A7:  MOVF   78,W
06A8:  MOVWF  60
06A9:  MOVLW  30
06AA:  ADDWF  5E,W
06AB:  MOVWF  62
06AC:  MOVF   5F,W
06AD:  MOVWF  63
06AE:  BTFSC  03.0
06AF:  INCF   63,F
06B0:  MOVLW  30
06B1:  ADDWF  31,W
06B2:  MOVWF  64
06B3:  MOVF   32,W
06B4:  MOVWF  65
06B5:  BTFSC  03.0
06B6:  INCF   65,F
06B7:  MOVF   63,W
06B8:  MOVWF  67
06B9:  MOVF   62,W
06BA:  MOVWF  66
06BB:  MOVF   64,W
06BC:  MOVWF  68
06BD:  CALL   124
06BE:  MOVLW  30
06BF:  ADDWF  5E,W
06C0:  MOVWF  62
06C1:  MOVF   5F,W
06C2:  MOVWF  63
06C3:  BTFSC  03.0
06C4:  INCF   63,F
06C5:  MOVF   63,W
06C6:  MOVWF  65
06C7:  MOVF   62,W
06C8:  MOVWF  64
06C9:  CALL   0E6
....................                 //lcd_putchar('0');// Hien thi ra LCD so 0 
....................               
....................                } 
....................                else  if(cot3==1){lcd_putcmd(clear_scr); 
06CA:  GOTO   7DC
06CB:  BTFSS  06.6
06CC:  GOTO   751
06CD:  MOVLW  01
06CE:  MOVWF  6B
06CF:  CALL   0AA
....................                         
....................                         if (ok==0)  kq=kq1; 
06D0:  MOVF   2F,F
06D1:  BTFSS  03.2
06D2:  GOTO   6DB
06D3:  MOVF   30,F
06D4:  BTFSS  03.2
06D5:  GOTO   6DB
06D6:  MOVF   5F,W
06D7:  MOVWF  5D
06D8:  MOVF   5E,W
06D9:  MOVWF  5C
....................                         else 
06DA:  GOTO   73C
....................                         { 
....................                             switch (pt) 
....................                             { 
06DB:  MOVF   31,W
06DC:  MOVWF  77
06DD:  MOVF   32,W
06DE:  MOVWF  7A
06DF:  MOVF   7A,W
06E0:  BTFSS  03.2
06E1:  GOTO   6E6
06E2:  MOVLW  01
06E3:  SUBWF  77,W
06E4:  BTFSC  03.2
06E5:  GOTO   6FC
06E6:  MOVF   7A,W
06E7:  BTFSS  03.2
06E8:  GOTO   6ED
06E9:  MOVLW  02
06EA:  SUBWF  77,W
06EB:  BTFSC  03.2
06EC:  GOTO   70A
06ED:  MOVF   7A,W
06EE:  BTFSS  03.2
06EF:  GOTO   6F4
06F0:  MOVLW  03
06F1:  SUBWF  77,W
06F2:  BTFSC  03.2
06F3:  GOTO   718
06F4:  MOVF   7A,W
06F5:  BTFSS  03.2
06F6:  GOTO   6FB
06F7:  MOVLW  04
06F8:  SUBWF  77,W
06F9:  BTFSC  03.2
06FA:  GOTO   72A
06FB:  GOTO   73C
....................                                case 1: kq=(kq1+kq2); kq1=kq; break; 
06FC:  MOVF   60,W
06FD:  ADDWF  5E,W
06FE:  MOVWF  5C
06FF:  MOVF   5F,W
0700:  MOVWF  5D
0701:  MOVF   61,W
0702:  BTFSC  03.0
0703:  INCFSZ 61,W
0704:  ADDWF  5D,F
0705:  MOVF   5D,W
0706:  MOVWF  5F
0707:  MOVF   5C,W
0708:  MOVWF  5E
0709:  GOTO   73C
....................                                case 2: kq=kq1-kq2; kq1=kq; break; 
070A:  MOVF   60,W
070B:  SUBWF  5E,W
070C:  MOVWF  5C
070D:  MOVF   5F,W
070E:  MOVWF  5D
070F:  MOVF   61,W
0710:  BTFSS  03.0
0711:  INCFSZ 61,W
0712:  SUBWF  5D,F
0713:  MOVF   5D,W
0714:  MOVWF  5F
0715:  MOVF   5C,W
0716:  MOVWF  5E
0717:  GOTO   73C
....................                                case 3: kq=kq1*kq2; kq1=kq; break; 
0718:  MOVF   5F,W
0719:  MOVWF  63
071A:  MOVF   5E,W
071B:  MOVWF  62
071C:  MOVF   61,W
071D:  MOVWF  65
071E:  MOVF   60,W
071F:  MOVWF  64
0720:  CALL   04F
0721:  MOVF   79,W
0722:  MOVWF  5D
0723:  MOVF   78,W
0724:  MOVWF  5C
0725:  MOVF   5D,W
0726:  MOVWF  5F
0727:  MOVF   5C,W
0728:  MOVWF  5E
0729:  GOTO   73C
....................                                case 4: kq=kq1/kq2; kq1=kq; break;                               
072A:  MOVF   5F,W
072B:  MOVWF  6A
072C:  MOVF   5E,W
072D:  MOVWF  69
072E:  MOVF   61,W
072F:  MOVWF  6C
0730:  MOVF   60,W
0731:  MOVWF  6B
0732:  CALL   0B5
0733:  MOVF   79,W
0734:  MOVWF  5D
0735:  MOVF   78,W
0736:  MOVWF  5C
0737:  MOVF   5D,W
0738:  MOVWF  5F
0739:  MOVF   5C,W
073A:  MOVWF  5E
073B:  GOTO   73C
....................                             } 
....................                                                     
....................                         } 
....................                         kq1=0;kq2=0;pt=0;ok=0; 
073C:  CLRF   5F
073D:  CLRF   5E
073E:  CLRF   61
073F:  CLRF   60
0740:  CLRF   32
0741:  CLRF   31
0742:  CLRF   30
0743:  CLRF   2F
....................                         write_line2(kq+48); 
0744:  MOVLW  30
0745:  ADDWF  5C,W
0746:  MOVWF  62
0747:  MOVF   5D,W
0748:  MOVWF  63
0749:  BTFSC  03.0
074A:  INCF   63,F
074B:  MOVF   63,W
074C:  MOVWF  65
074D:  MOVF   62,W
074E:  MOVWF  64
074F:  CALL   0E6
....................                         
....................                          
....................                         //lcd_putchar('=');// Hien thi ra LCD so = 
....................                                              } 
....................                      else  if(cot4==1){lcd_putcmd(clear_scr); 
0750:  GOTO   7DC
0751:  BTFSS  06.7
0752:  GOTO   7DC
0753:  MOVLW  01
0754:  MOVWF  6B
0755:  CALL   0AA
....................                              
....................                               if (ok==0) 
0756:  MOVF   2F,F
0757:  BTFSS  03.2
0758:  GOTO   763
0759:  MOVF   30,F
075A:  BTFSS  03.2
075B:  GOTO   763
....................                               { 
....................                                  pt=2; 
075C:  CLRF   32
075D:  MOVLW  02
075E:  MOVWF  31
....................                                  ok=1; 
075F:  CLRF   30
0760:  MOVLW  01
0761:  MOVWF  2F
....................                               } 
....................                               else 
0762:  GOTO   7C7
....................                               { 
....................                                  switch (pt) 
....................                                  { 
0763:  MOVF   31,W
0764:  MOVWF  77
0765:  MOVF   32,W
0766:  MOVWF  7A
0767:  MOVF   7A,W
0768:  BTFSS  03.2
0769:  GOTO   76E
076A:  MOVLW  01
076B:  SUBWF  77,W
076C:  BTFSC  03.2
076D:  GOTO   784
076E:  MOVF   7A,W
076F:  BTFSS  03.2
0770:  GOTO   775
0771:  MOVLW  02
0772:  SUBWF  77,W
0773:  BTFSC  03.2
0774:  GOTO   792
0775:  MOVF   7A,W
0776:  BTFSS  03.2
0777:  GOTO   77C
0778:  MOVLW  03
0779:  SUBWF  77,W
077A:  BTFSC  03.2
077B:  GOTO   7A0
077C:  MOVF   7A,W
077D:  BTFSS  03.2
077E:  GOTO   783
077F:  MOVLW  04
0780:  SUBWF  77,W
0781:  BTFSC  03.2
0782:  GOTO   7B2
0783:  GOTO   7C4
....................                                     case 1: kq=(kq1+kq2); kq1=kq; break; 
0784:  MOVF   60,W
0785:  ADDWF  5E,W
0786:  MOVWF  5C
0787:  MOVF   5F,W
0788:  MOVWF  5D
0789:  MOVF   61,W
078A:  BTFSC  03.0
078B:  INCFSZ 61,W
078C:  ADDWF  5D,F
078D:  MOVF   5D,W
078E:  MOVWF  5F
078F:  MOVF   5C,W
0790:  MOVWF  5E
0791:  GOTO   7C4
....................                                     case 2: kq=kq1-kq2; kq1=kq; break; 
0792:  MOVF   60,W
0793:  SUBWF  5E,W
0794:  MOVWF  5C
0795:  MOVF   5F,W
0796:  MOVWF  5D
0797:  MOVF   61,W
0798:  BTFSS  03.0
0799:  INCFSZ 61,W
079A:  SUBWF  5D,F
079B:  MOVF   5D,W
079C:  MOVWF  5F
079D:  MOVF   5C,W
079E:  MOVWF  5E
079F:  GOTO   7C4
....................                                     case 3: kq=kq1*kq2; kq1=kq; break; 
07A0:  MOVF   5F,W
07A1:  MOVWF  63
07A2:  MOVF   5E,W
07A3:  MOVWF  62
07A4:  MOVF   61,W
07A5:  MOVWF  65
07A6:  MOVF   60,W
07A7:  MOVWF  64
07A8:  CALL   04F
07A9:  MOVF   79,W
07AA:  MOVWF  5D
07AB:  MOVF   78,W
07AC:  MOVWF  5C
07AD:  MOVF   5D,W
07AE:  MOVWF  5F
07AF:  MOVF   5C,W
07B0:  MOVWF  5E
07B1:  GOTO   7C4
....................                                     case 4: kq=kq1/kq2; kq1=kq; break;                               
07B2:  MOVF   5F,W
07B3:  MOVWF  6A
07B4:  MOVF   5E,W
07B5:  MOVWF  69
07B6:  MOVF   61,W
07B7:  MOVWF  6C
07B8:  MOVF   60,W
07B9:  MOVWF  6B
07BA:  CALL   0B5
07BB:  MOVF   79,W
07BC:  MOVWF  5D
07BD:  MOVF   78,W
07BE:  MOVWF  5C
07BF:  MOVF   5D,W
07C0:  MOVWF  5F
07C1:  MOVF   5C,W
07C2:  MOVWF  5E
07C3:  GOTO   7C4
....................                                  } 
....................                                  pt=1;                             
07C4:  CLRF   32
07C5:  MOVLW  01
07C6:  MOVWF  31
....................                                } 
....................                                write_line1(kq1+48,pt+48); 
07C7:  MOVLW  30
07C8:  ADDWF  5E,W
07C9:  MOVWF  62
07CA:  MOVF   5F,W
07CB:  MOVWF  63
07CC:  BTFSC  03.0
07CD:  INCF   63,F
07CE:  MOVLW  30
07CF:  ADDWF  31,W
07D0:  MOVWF  64
07D1:  MOVF   32,W
07D2:  MOVWF  65
07D3:  BTFSC  03.0
07D4:  INCF   65,F
07D5:  MOVF   63,W
07D6:  MOVWF  67
07D7:  MOVF   62,W
07D8:  MOVWF  66
07D9:  MOVF   64,W
07DA:  MOVWF  68
07DB:  CALL   124
....................                              
....................                               //lcd_putchar('+');// Hien thi ra LCD so + 
....................                              
....................                            } 
....................        } 
.................... } 
....................  //------------------------------------------------------------------------ 
....................  /*------------------------Chuong trinh chinh-------------------------------*/ 
....................  //------------------------------------------------------------------------ 
07DC:  BCF    0B.0
07DD:  BCF    0A.3
07DE:  BCF    0A.4
07DF:  GOTO   01D
.................... void main(){ 
*
0882:  CLRF   04
0883:  BCF    03.7
0884:  MOVLW  1F
0885:  ANDWF  03,F
0886:  BSF    03.5
0887:  BSF    1F.0
0888:  BSF    1F.1
0889:  BSF    1F.2
088A:  BCF    1F.3
088B:  MOVLW  07
088C:  MOVWF  1C
....................    lcd_init(); 
088D:  BCF    03.5
088E:  GOTO   000
....................    enable_interrupts(INT_RB); 
088F:  BSF    03.6
0890:  BSF    0B.3
....................    //enable_interrupts(GLOBAL); 
....................     
....................    trisb=0xF0; 
0891:  MOVLW  F0
0892:  BSF    03.5
0893:  BCF    03.6
0894:  MOVWF  06
....................     
....................    while(tit0[i]!=0){ 
0895:  BCF    03.5
0896:  MOVF   53,W
0897:  BCF    0A.3
0898:  CALL   033
0899:  BSF    0A.3
089A:  XORLW  00
089B:  BTFSC  03.2
089C:  GOTO   0BA
....................       lcd_putchar(tit0[i]); 
089D:  MOVF   53,W
089E:  BCF    0A.3
089F:  CALL   033
08A0:  BSF    0A.3
08A1:  MOVWF  54
08A2:  CLRF   28
08A3:  BTFSC  0B.7
08A4:  BSF    28.7
08A5:  BCF    0B.7
08A6:  MOVF   54,W
08A7:  MOVWF  6A
08A8:  BCF    0A.3
08A9:  CALL   0DA
08AA:  BSF    0A.3
08AB:  BTFSC  28.7
08AC:  BSF    0B.7
....................       i++; 
08AD:  INCF   53,F
08AE:  CLRF   28
08AF:  BTFSC  0B.7
08B0:  BSF    28.7
08B1:  BCF    0B.7
....................       delay_ms(70);       
08B2:  MOVLW  46
08B3:  MOVWF  6C
08B4:  BCF    0A.3
08B5:  CALL   085
08B6:  BSF    0A.3
08B7:  BTFSC  28.7
08B8:  BSF    0B.7
....................    } 
08B9:  GOTO   096
08BA:  CLRF   28
08BB:  BTFSC  0B.7
08BC:  BSF    28.7
08BD:  BCF    0B.7
....................    lcd_putcmd(line_2); 
08BE:  MOVLW  C0
08BF:  MOVWF  6B
08C0:  BCF    0A.3
08C1:  CALL   0AA
08C2:  BSF    0A.3
08C3:  BTFSC  28.7
08C4:  BSF    0B.7
....................    i=0;ok=0;pt=0; 
08C5:  CLRF   53
08C6:  CLRF   30
08C7:  CLRF   2F
08C8:  CLRF   32
08C9:  CLRF   31
....................     
....................    while(tit1[i]!=0){ 
08CA:  MOVF   53,W
08CB:  BCF    0A.3
08CC:  CALL   043
08CD:  BSF    0A.3
08CE:  XORLW  00
08CF:  BTFSC  03.2
08D0:  GOTO   0EE
....................       lcd_putchar(tit1[i]); 
08D1:  MOVF   53,W
08D2:  BCF    0A.3
08D3:  CALL   043
08D4:  BSF    0A.3
08D5:  MOVWF  54
08D6:  CLRF   28
08D7:  BTFSC  0B.7
08D8:  BSF    28.7
08D9:  BCF    0B.7
08DA:  MOVF   54,W
08DB:  MOVWF  6A
08DC:  BCF    0A.3
08DD:  CALL   0DA
08DE:  BSF    0A.3
08DF:  BTFSC  28.7
08E0:  BSF    0B.7
....................       i++; 
08E1:  INCF   53,F
08E2:  CLRF   28
08E3:  BTFSC  0B.7
08E4:  BSF    28.7
08E5:  BCF    0B.7
....................       delay_ms(70);       
08E6:  MOVLW  46
08E7:  MOVWF  6C
08E8:  BCF    0A.3
08E9:  CALL   085
08EA:  BSF    0A.3
08EB:  BTFSC  28.7
08EC:  BSF    0B.7
....................    } 
08ED:  GOTO   0CA
....................    delay_ms(2000); 
08EE:  MOVLW  08
08EF:  MOVWF  54
08F0:  CLRF   28
08F1:  BTFSC  0B.7
08F2:  BSF    28.7
08F3:  BCF    0B.7
08F4:  MOVLW  FA
08F5:  MOVWF  6C
08F6:  BCF    0A.3
08F7:  CALL   085
08F8:  BSF    0A.3
08F9:  BTFSC  28.7
08FA:  BSF    0B.7
08FB:  DECFSZ 54,F
08FC:  GOTO   0F0
08FD:  CLRF   28
08FE:  BTFSC  0B.7
08FF:  BSF    28.7
0900:  BCF    0B.7
....................    write_line1(1000,1);delay_ms(2000);  
0901:  MOVLW  03
0902:  MOVWF  67
0903:  MOVLW  E8
0904:  MOVWF  66
0905:  MOVLW  01
0906:  MOVWF  68
0907:  BCF    0A.3
0908:  CALL   124
0909:  BSF    0A.3
090A:  BTFSC  28.7
090B:  BSF    0B.7
090C:  MOVLW  08
090D:  MOVWF  54
090E:  CLRF   28
090F:  BTFSC  0B.7
0910:  BSF    28.7
0911:  BCF    0B.7
0912:  MOVLW  FA
0913:  MOVWF  6C
0914:  BCF    0A.3
0915:  CALL   085
0916:  BSF    0A.3
0917:  BTFSC  28.7
0918:  BSF    0B.7
0919:  DECFSZ 54,F
091A:  GOTO   10E
091B:  CLRF   28
091C:  BTFSC  0B.7
091D:  BSF    28.7
091E:  BCF    0B.7
....................    lcd_putcmd(clear_scr); 
091F:  MOVLW  01
0920:  MOVWF  6B
0921:  BCF    0A.3
0922:  CALL   0AA
0923:  BSF    0A.3
0924:  BTFSC  28.7
0925:  BSF    0B.7
....................    
....................     
....................    enable_interrupts(GLOBAL); 
0926:  MOVLW  C0
0927:  IORWF  0B,F
....................    
....................   while(1){ 
....................       //quet hang 
....................       hang4=0;   hang1=1;   delay_ms(10); //Xuat tin hieu 1 ra hang 1, 0 ra hang 4 de do hang,       
0928:  BCF    06.3
0929:  BSF    06.0
092A:  CLRF   28
092B:  BTFSC  0B.7
092C:  BSF    28.7
092D:  BCF    0B.7
092E:  MOVLW  0A
092F:  MOVWF  6C
0930:  BCF    0A.3
0931:  CALL   085
0932:  BSF    0A.3
0933:  BTFSC  28.7
0934:  BSF    0B.7
....................       hang1=0;   hang2=1;   delay_ms(10); //Xuat tin hieu 1 ra hang 2, 0 ra hang 1 de do hang      
0935:  BCF    06.0
0936:  BSF    06.1
0937:  CLRF   28
0938:  BTFSC  0B.7
0939:  BSF    28.7
093A:  BCF    0B.7
093B:  MOVLW  0A
093C:  MOVWF  6C
093D:  BCF    0A.3
093E:  CALL   085
093F:  BSF    0A.3
0940:  BTFSC  28.7
0941:  BSF    0B.7
....................       hang2=0;   hang3=1;   delay_ms(10); //Xuat tin hieu 1 ra hang 3, 0 ra hang 2 de do hang      
0942:  BCF    06.1
0943:  BSF    06.2
0944:  CLRF   28
0945:  BTFSC  0B.7
0946:  BSF    28.7
0947:  BCF    0B.7
0948:  MOVLW  0A
0949:  MOVWF  6C
094A:  BCF    0A.3
094B:  CALL   085
094C:  BSF    0A.3
094D:  BTFSC  28.7
094E:  BSF    0B.7
....................       hang3=0;   hang4=1;   delay_ms(10); //Xuat tin hieu 1 ra hang 4, 0 ra hang 3 de do hang 
094F:  BCF    06.2
0950:  BSF    06.3
0951:  CLRF   28
0952:  BTFSC  0B.7
0953:  BSF    28.7
0954:  BCF    0B.7
0955:  MOVLW  0A
0956:  MOVWF  6C
0957:  BCF    0A.3
0958:  CALL   085
0959:  BSF    0A.3
095A:  BTFSC  28.7
095B:  BSF    0B.7
....................    } 
095C:  GOTO   128
.................... } 
095D:  SLEEP

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
