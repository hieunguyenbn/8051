C51 COMPILER V9.02   UART                                                                  11/21/2016 11:14:15 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\00-libfiles\uart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\00-libfiles) DE
                    -BUG OBJECTEXTEND PRINT(.\Listings\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          /***************************************************************************************************
   2                                              ExploreEmbedded Copyright Notice    
   3          ****************************************************************************************************
   4           * File:   uart.c (AVR controllers)
   5           * Version: 16.0
   6           * Author: ExploreEmbedded
   7           * Website: http://www.exploreembedded.com/wiki
   8           * Description: File contains the Library routines for UART
   9          
  10          This code has been developed and tested on ExploreEmbedded boards.  
  11          We strongly believe that the library works on any of development boards for respective controllers. 
  12          Check this link http://www.exploreembedded.com/wiki for awesome tutorials on 8051,PIC,AVR,ARM,Robotics,RTO
             -S,IOT.
  13          ExploreEmbedded invests substantial time and effort developing open source HW and SW tools, to support con
             -sider buying the ExploreEmbedded boards.
  14           
  15          The ExploreEmbedded libraries and examples are licensed under the terms of the new-bsd license(two-clause 
             -bsd license).
  16          See also: http://www.opensource.org/licenses/bsd-license.php
  17          
  18          EXPLOREEMBEDDED DISCLAIMS ANY KIND OF HARDWARE FAILURE RESULTING OUT OF USAGE OF LIBRARIES, DIRECTLY OR
  19          INDIRECTLY. FILES MAY BE SUBJECT TO CHANGE WITHOUT PRIOR NOTICE. THE REVISION HISTORY CONTAINS THE INFORMA
             -TION 
  20          RELATED TO UPDATES.
  21           
  22          
  23          Permission to use, copy, modify, and distribute this software and its documentation for any purpose
  24          and without fee is hereby granted, provided that this copyright notices appear in all copies 
  25          and that both those copyright notices and this permission notice appear in supporting documentation.
  26          ***************************************************************************************************/
  27          
  28          
  29          /**************************************************************************************************
  30                                       Revision History
  31          ****************************************************************************************************
  32          15.0: Initial version 
  33          16.0: Updated the Tx Number function to support bin,dec,hex in one function.
  34          ***************************************************************************************************/
  35          #include <stdarg.h>
  36          #include "uart.h"
  37          
  38          
  39          
  40          
  41          /***************************************************************************************************
  42                                   void UART_Init(uint32_t v_baudRate_u32)
  43          ****************************************************************************************************
  44           * I/P Arguments: uint32_t : Baudrate to be configured.
  45           * Return value    : none
  46          
  47           * description  :This function is used to initialize the UART at specified baud rate.
  48                           If the requested baud rate is not within the supported range then
  49                           the default baud rate of 9600 is set.
  50          
C51 COMPILER V9.02   UART                                                                  11/21/2016 11:14:15 PAGE 2   

  51          
  52                      Refer uart.h file for Supported(range) baud rates.        
  53          ***************************************************************************************************/
  54          void UART_Init(uint32_t v_baudRate_u32)
  55          {    
  56   1          TMOD |= 0x20; //Timer1 in Mode2.
  57   1          SCON=0x50;    // Asynchronous mode, 8-bit data and 1-stop bit
  58   1          TR1=1;        //Turn ON the timer for Baud rate generation
  59   1          UART_SetBaudRate(v_baudRate_u32);
  60   1      }
  61          
  62          
  63          
  64          
  65          
  66          
  67          /***************************************************************************************************
  68                                   void UART_SetBaudRate(uint32_t v_baudRate_u32)
  69          ****************************************************************************************************
  70           * I/P Arguments: uint32_t : v_baudRate_u32 to be configured.
  71           * Return value    : none
  72          
  73           * description  :This function is used to Set/Change the baudrate on the fly.
  74                           If the requested baud rate is not within the supported range then
  75                           the default baudrate of 9600 is set.
  76          
  77                      Refer uart.h file for Supported range of baud rates.
  78          ***************************************************************************************************/
  79          void UART_SetBaudRate(uint32_t v_baudRate_u32)
  80          {
  81   1          sint8_t RegValue;
  82   1      
  83   1          if((v_baudRate_u32 >= C_MinBaudRate_U32) && (v_baudRate_u32<=C_MaxBaudRate_U32))
  84   1          {
  85   2              /* Check if the requested baudate is within range,
  86   2               If yes then calculate the value to be loaded into baud rate generator. */
  87   2              RegValue = M_GetBaudRateGeneratorValue(v_baudRate_u32);
  88   2          }
  89   1          else
  90   1          {
  91   2              /*     Invalid baudrate requested, hence set it to default baudrate of 9600 */
  92   2              RegValue = M_GetBaudRateGeneratorValue(9600);
  93   2          }
  94   1      
  95   1          TH1 = RegValue; 
  96   1      }
  97          
  98          
  99          
 100          
 101          
 102          /***************************************************************************************************
 103                                        char UART_RxChar()
 104          ****************************************************************************************************
 105           * I/P Arguments: none.
 106           * Return value    : char: Ascii value of the character received
 107          
 108           * description :This function is used to receive a char from UART module.
 109                          It waits till a char is received and returns it after reception.
 110          ***************************************************************************************************/
 111          char UART_RxChar(void)
 112          {
C51 COMPILER V9.02   UART                                                                  11/21/2016 11:14:15 PAGE 3   

 113   1          while(RI==0);      // Wait till the data is received
 114   1          RI=0;             // Clear Receive Interrupt Flag for next cycle
 115   1          
 116   1          return(SBUF);      // return the received char
 117   1      }
 118          
 119          
 120          
 121          
 122          
 123          
 124          
 125          
 126          /***************************************************************************************************
 127                                   void UART_TxChar(char v_uartData_u8)
 128          ****************************************************************************************************
 129           * I/P Arguments: char--> Ascii value of the character to be transmitted.
 130           * Return value    : none.
 131          
 132           * description  :This function is used to transmit a char through UART module.
 133          ***************************************************************************************************/
 134          void UART_TxChar(char v_uartData_u8)
 135          {
 136   1          SBUF=v_uartData_u8; // Load the data to be transmitted
 137   1          while(TI==0);       // Wait till the data is trasmitted
 138   1          TI=0;                //Clear the Tx flag for next cycle.
 139   1      }
 140          
 141          
 142          
 143          
 144          
 145          
 146          
 147          /***************************************************************************************************
 148                                   void UART_TxString(char *ptr_string)
 149          ****************************************************************************************************
 150           * I/P Arguments: String(Address of the string) to be transmitted.
 151           * Return value    : none
 152          
 153           * description :This function is used to transmit a NULL terminated string through UART.
 154                         1.The ptr_string points to the first char of the string
 155                              and traverses till the end(NULL CHAR) and transmits a char each time
 156          ***************************************************************************************************/
 157          #if ((Enable_UART_TxString==1)|| (Enable_UART_Printf == 1))
 158          void UART_TxString(char *ptr_string)
 159          {
 160   1          while(*ptr_string)
 161   1              UART_TxChar(*ptr_string++);// Loop through the string and transmit char by char
 162   1      }
 163          #endif
 164          
 165          
 166          
 167          
 168          
 169          
 170          /***************************************************************************************************
 171                                   uint8_t UART_RxString(char *ptr_string)
 172          ****************************************************************************************************
 173           * I/P Arguments: char *:  Address of the string/buffer where the received data needs to be stored
 174           * Return value    : uint8_t: Number of chars received.
C51 COMPILER V9.02   UART                                                                  11/21/2016 11:14:15 PAGE 4   

 175          
 176           * description  :
 177                        1.This function is used to receive a ASCII string through UART till the carriage_return/New_
             -line
 178                        2.The stream of data is copied to the buffer till carriage_return/New_line is encountered.
 179                        3. Once the Carriage_return/New_Line is received the string will be null terminated.
 180          
 181          ******NOTE*******:
 182            1.The received char is ECHOED back,
 183              if not required then comment UART_TxChar(ch) in the code.
 184            2.BackSlash is not taken care.
 185          ***************************************************************************************************/
 186          #if (Enable_UART_RxString==1)
 187          uint8_t UART_RxString(char *ptr_string)
 188          {
 189   1          char ch;
 190   1          uint8_t len = 0;
 191   1          while(1)
 192   1          {
 193   2              ch=UART_RxChar();    //Receive a char
 194   2              UART_TxChar(ch);     //Echo back the received char
 195   2      
 196   2              if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
 197   2              {                             //once enter key is pressed null terminate the string
 198   3                  ptr_string[len]=0;           //and break the loop
 199   3                  break;                  
 200   3              }
 201   2              else if((ch=='\b') && (len!=0))
 202   2              {
 203   3                  len--;    //If backspace is pressed then decrement the index to remove the old char
 204   3              }
 205   2              else
 206   2              {
 207   3                  ptr_string[len]=ch; //copy the char into string and increment the index
 208   3                  len++;
 209   3              }
 210   2          }
 211   1        return len;   
 212   1      }
 213          #endif
 214          
 215          
 216          
 217          
 218          
 219          
 220          /***************************************************************************************************
 221          void UART_TxNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToTransmit_u8)
 222          ****************************************************************************************************
 223           * I/P Arguments: 
 224                            uint8_t :  specifies type of number C_BINARY_U8(2),C_DECIMAL_U8(10), C_HEX_U8(16)
 225                            uint32_t: Number to be transmitted on UART.
 226                            uint8_t : Number of digits to be transmitted
 227          
 228           * Return value    : none
 229          
 230           * description  :This function is used to transmit a max of 10digit decimal number.
 231                          2nd parameter specifies the number of digits from the right side to be transmitted
 232                           The output for the input combinations is as below
 233          
 234              Binary:     1.(10,4) then 4-LSB will be transmitted ie. 1010
 235                          2.(10,8) then 8-LSB will be transmitted ie. 00001010
C51 COMPILER V9.02   UART                                                                  11/21/2016 11:14:15 PAGE 5   

 236                          3.(10,2) then 2-LSB will be transmitted ie. 10     
 237          
 238              Decimal            
 239                          4.(12345,4) then 4-digits ie. 2345 will be transmitted
 240                          5.(12345,6) then 6-digits ie. 012345 will be transmitted
 241                          6.(12345,C_DefaultDigitsToTransmit_U8) then 12345 will be transmitted.
 242          
 243              Hex:
 244                          7.(0x12AB,3) then 3-digits ie. 2AB will be transmitted
 245                          8.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
 246                          9.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.    
 247          ****************************************************************************************************/
 248          #if ((Enable_UART_TxNumber==1) || (Enable_UART_TxFloatNumber==1) || (Enable_UART_Printf == 1))
 249          void UART_TxNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToTransmit_u8)
 250          {
 251   1          uint8_t i=0,a[10];
 252   1      
 253   1          if(C_BINARY_U8 == v_numericSystem_u8)
 254   1          {
 255   2              while(v_numOfDigitsToTransmit_u8!=0)
 256   2              {
 257   3                  /* Start Extracting the bits from the specified bit positions.
 258   3                   Get the Acsii values of the bits and transmit */
 259   3                  i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
 260   3                  UART_TxChar(util_Dec2Ascii(i));
 261   3                  v_numOfDigitsToTransmit_u8--;
 262   3              }    
 263   2          }     
 264   1          else if(v_number_u32==0)
 265   1          {
 266   2              /* If the number is zero then update the array with the same for transmitting */
 267   2              for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 268   2                  UART_TxChar('0');
 269   2          }
 270   1          else
 271   1          {
 272   2              for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
 273   2              {
 274   3                  /* Continue extracting the digits from right side
 275   3                     till the Specified v_numOfDigitsToTransmit_u8 */
 276   3                  if(v_number_u32!=0)
 277   3                  {
 278   4                      /* Extract the digits from the number till it becomes zero.
 279   4                      First get the remainder and divide the number by 10 each time.
 280   4      
 281   4                      example for Decimal number:
 282   4                      If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
 283   4                      The process continues till it becomes zero or max digits reached*/
 284   4                      a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 285   4                      v_number_u32=v_number_u32/v_numericSystem_u8;
 286   4                  }
 287   3                  else if( (v_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 288   3                          (v_numOfDigitsToTransmit_u8 > C_MaxDigitsToTransmit_U8))
 289   3                  {
 290   4                      /* Stop the iteration if the Max number of digits are reached or
 291   4                       the user expects exact(Default) digits in the number to be transmitted */ 
 292   4                      break;
 293   4                  }
 294   3                  else
 295   3                  {
 296   4                      /*In case user expects more digits to be transmitted than the actual digits in number,
 297   4                        then update the remaining digits with zero.
C51 COMPILER V9.02   UART                                                                  11/21/2016 11:14:15 PAGE 6   

 298   4                      Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
 299   4                      a[i]=0;
 300   4                  }
 301   3              }
 302   2      
 303   2              while(i)
 304   2              { 
 305   3                  /* Finally get the ascii values of the digits and transmit*/
 306   3                  UART_TxChar(util_Hex2Ascii(a[i-1]));
 307   3                  i--;
 308   3              }
 309   2          }
 310   1      
 311   1      
 312   1      }
 313          #endif
 314          
 315          
 316          
 317          
 318          
 319          
 320          
 321          
 322          
 323          /***************************************************************************************************
 324                      void  UART_TxFloatNumber(float v_floatNumber_f32)
 325          ****************************************************************************************************
 326           * Function name:  UART_TxFloatNumber()
 327           * I/P Arguments: float: float Number to be transmitted on UART.
 328          
 329           * Return value    : none
 330          
 331           * description  :This function is used to transmit a floating point number
 332          
 333           * Note         :It supports 6digits of precision.  
 334                   Float will be disabled by default as it takes huge controller resources
 335                   It can be enabled by changing value of Enable_UART_TxFloatNumber to 1 in uart.h     
 336          ****************************************************************************************************/
 337          #if (Enable_UART_TxFloatNumber==1)
              void UART_TxFloatNumber(float v_floatNumber_f32)
              {
                  uint32_t v_tempNumber_u32;
                  /* Dirty hack to support the floating point by extracting the integer and fractional part.
                    1.Type cast the number to int to get the integer part.
                    2.transmit the extracted integer part followed by a decimal point(.).
                    3.Later the integer part is made zero by subtracting with the extracted integer value.
                    4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */
              
                  v_tempNumber_u32 = (uint32_t) v_floatNumber_f32;
                  UART_TxNumber(C_DECIMAL_U8,C_DECIMAL_U8,v_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
              
                  UART_TxChar('.');
              
                  v_floatNumber_f32 = v_floatNumber_f32 - v_tempNumber_u32;
                  v_tempNumber_u32 = v_floatNumber_f32 * 1000000;
                  UART_TxNumber(C_DECIMAL_U8,C_DECIMAL_U8,v_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
              }
              #endif
 357          
 358          
 359          
C51 COMPILER V9.02   UART                                                                  11/21/2016 11:14:15 PAGE 7   

 360          
 361          
 362          
 363          /***************************************************************************************************
 364                      void UART_Printf(const char *argList, ...)
 365          ****************************************************************************************************
 366           * Function name:  UART_Printf()
 367           * I/P Arguments: variable length arguments similar to printf
 368          
 369           * Return value    : none
 370          
 371           * description  :This function is similar to printf function in C.
 372                           It takes the arguments with specified format and prints accordingly
 373                           The supported format specifiers are as below.
 374                           1. %c: character
 375                           2. %d: signed 16-bit number
 376                           3. %D: signed 32-bit number
 377                           4. %u: unsigned 16-bit number
 378                           5. %U: unsigned 32-bit number
 379                           6. %b: 16-bit binary number
 380                           7. %B: 32-bit binary number
 381                           8. %f: Float number
 382                           9. %x: 16-bit hexadecimal number
 383                           10. %X: 32-bit hexadecimal number
 384                           11. %s: String
 385          
 386            Note: By default all the functions will be disabled. The required functions can be enabled by 
 387                  setting the respective compiler switch to 1 in uart.h file.
 388                  Ex:  setting Enable_UART_TxDecimalNumber to 1 will enable %d
 389                       setting Enable_UART_TxHexNumber to 1 will enable %x
 390          
 391            Extra feature is available to specify the number of digits to be transmitted using printf.
 392               ex: %4d: will transmit the lower four digits of the decimal number.
 393                   %12b: will transmit the 12-LSB of the number
 394                   %d: Will transmit the exact digits of the number
 395                   
 396          #####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
 397                  uint8_t v_Num_u8;
 398                  UART_Printf("num1:%u",(uint16_t)v_Num_u8);          
 399          ***************************************************************************************************/
 400          #if ( Enable_UART_Printf   == 1 ) 
 401          void UART_Printf(const char *argList, ...)
 402          {
 403   1          const char *ptr;
 404   1          va_list argp;
 405   1          sint16_t v_num_s16;
 406   1          sint32_t v_num_s32;
 407   1          uint16_t v_num_u16;
 408   1          uint32_t v_num_u32;
 409   1          char *str;
 410   1          char  ch;
 411   1          uint8_t v_numOfDigitsToTransmit_u8;
 412   1      #if (Enable_UART_TxFloatNumber==1)
                  double v_floatNum_f32;
              #endif    
 415   1      
 416   1      
 417   1          va_start(argp, argList);
 418   1      
 419   1          /* Loop through the list to extract all the input arguments */
 420   1          for(ptr = argList; *ptr != '\0'; ptr++)
 421   1          {
C51 COMPILER V9.02   UART                                                                  11/21/2016 11:14:15 PAGE 8   

 422   2      
 423   2              ch= *ptr;
 424   2              if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 425   2              {
 426   3                  ptr++;
 427   3                  ch = *ptr;
 428   3                 if((ch>=0x30) && (ch<=0x39))
 429   3                  {
 430   4                     v_numOfDigitsToTransmit_u8 = 0;
 431   4                     while((ch>=0x30) && (ch<=0x39))
 432   4                      {
 433   5                         v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 434   5                         ptr++;
 435   5                         ch = *ptr;
 436   5                      }
 437   4                  }
 438   3                  else
 439   3                  {
 440   4                    v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 441   4                  }                
 442   3      
 443   3      
 444   3                  switch(ch)       /* Decode the type of the argument */
 445   3                  {
 446   4                  case 'C':
 447   4                  case 'c':     /* Argument type is of char, hence read char data from the argp */
 448   4                      ch = va_arg(argp, uint8_t);
 449   4                      UART_TxChar(ch);
 450   4                      break;
 451   4      
 452   4                  case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
 453   4                      v_num_s16 = va_arg(argp, sint16_t);
 454   4                      if(v_num_s16<0)
 455   4                       { /* If the number is -ve then display the 2's complement along with '-' sign */ 
 456   5                         v_num_s16 = -v_num_s16;
 457   5                         UART_TxChar('-');
 458   5                       }
 459   4                      UART_TxNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
 460   4                      break;
 461   4                      
 462   4                  case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
 463   4                      v_num_s32 = va_arg(argp, sint32_t);                
 464   4                      if(v_num_s32<0)
 465   4                       { /* If the number is -ve then display the 2's complement along with '-' sign */
 466   5                         v_num_s32 = -v_num_s32;
 467   5                         UART_TxChar('-');
 468   5                       }
 469   4                      UART_TxNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToTransmit_u8);            
 470   4                      break;    
 471   4      
 472   4                  case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
 473   4                      v_num_u16 = va_arg(argp, uint16_t);            
 474   4                      UART_TxNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);                
 475   4                      break;
 476   4                  
 477   4                  case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
 478   4                      v_num_u32 = va_arg(argp, uint32_t);            
 479   4                      UART_TxNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);                
 480   4                      break;            
 481   4      
 482   4                  case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
 483   4                      v_num_u16 = va_arg(argp, uint16_t);                
C51 COMPILER V9.02   UART                                                                  11/21/2016 11:14:15 PAGE 9   

 484   4                      UART_TxNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToTransmit_u8);            
 485   4                      break;
 486   4      
 487   4                  case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
 488   4                      v_num_u32 = va_arg(argp, uint32_t);                        
 489   4                      UART_TxNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToTransmit_u8);                
 490   4                      break;
 491   4      
 492   4                  
 493   4                  case 'b':  /* Argument type is of binary,Read int and convert to binary */
 494   4                      v_num_u16 = va_arg(argp, uint16_t);        
 495   4                      
 496   4                      if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 497   4                         v_numOfDigitsToTransmit_u8 = 16;
 498   4                     
 499   4                      UART_TxNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToTransmit_u8);            
 500   4                      break;
 501   4      
 502   4                  case 'B':  /* Argument type is of binary,Read int and convert to binary */
 503   4                      v_num_u32 = va_arg(argp, uint32_t);            
 504   4                      
 505   4                      if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 506   4                         v_numOfDigitsToTransmit_u8 = 32;        
 507   4                     
 508   4                      UART_TxNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToTransmit_u8);                
 509   4                      break;
 510   4      
 511   4      
 512   4                  case 'F':
 513   4                  case 'f': /* Argument type is of float, hence read double data from the argp */
 514   4      #if (Enable_UART_TxFloatNumber==1)                
                              v_floatNum_f32 = va_arg(argp, double);                
                              UART_TxFloatNumber(v_floatNum_f32);
              #endif            
 518   4                      break;                
 519   4      
 520   4      
 521   4                  case 'S':
 522   4                  case 's': /* Argument type is of string, hence get the pointer to sting passed */
 523   4                      str = va_arg(argp, char *);
 524   4                      UART_TxString(str);            
 525   4                      break;
 526   4      
 527   4                  case '%':
 528   4                      UART_TxChar('%');
 529   4                      break;
 530   4                  }
 531   3              }
 532   2              else
 533   2              {
 534   3                  /* As '%' is not detected transmit the char passed */
 535   3                  UART_TxChar(ch);
 536   3              }
 537   2          }
 538   1      
 539   1          va_end(argp);
 540   1      }
 541          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1179    ----
C51 COMPILER V9.02   UART                                                                  11/21/2016 11:14:15 PAGE 10  

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      64
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
